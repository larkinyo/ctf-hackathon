{"version":3,"file":"transaction.mjs","sources":["../../src/transaction/transaction.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport { Buffer } from 'buffer'\nimport { Config } from '../config'\nimport { AlgoAmount } from '../types/amount'\nimport { ABIReturn } from '../types/app'\nimport { EventType } from '../types/async-event-emitter'\nimport {\n  AtomicTransactionComposerToSend,\n  SendAtomicTransactionComposerResults,\n  SendTransactionFrom,\n  SendTransactionParams,\n  SendTransactionResult,\n  TransactionGroupToSend,\n  TransactionNote,\n  TransactionToSign,\n} from '../types/transaction'\nimport { toNumber } from '../util'\nimport { performAtomicTransactionComposerSimulate } from './perform-atomic-transaction-composer-simulate'\nimport Algodv2 = algosdk.Algodv2\nimport AtomicTransactionComposer = algosdk.AtomicTransactionComposer\nimport modelsv2 = algosdk.modelsv2\nimport SuggestedParams = algosdk.SuggestedParams\nimport Transaction = algosdk.Transaction\nimport TransactionSigner = algosdk.TransactionSigner\nimport TransactionWithSigner = algosdk.TransactionWithSigner\n\nexport const MAX_TRANSACTION_GROUP_SIZE = 16\nexport const MAX_APP_CALL_FOREIGN_REFERENCES = 8\nexport const MAX_APP_CALL_ACCOUNT_REFERENCES = 4\n\n/**\n * @deprecated Convert your data to a `string` or `Uint8Array`, if using ARC-2 use `AlgoKitComposer.arc2Note`.\n *\n * Encodes a transaction note into a byte array ready to be included in an Algorand transaction.\n *\n * @param note The transaction note\n * @returns the transaction note ready for inclusion in a transaction\n *\n *  Case on the value of `data` this either be:\n *   * `null` | `undefined`: `undefined`\n *   * `string`: The string value\n *   * Uint8Array: passthrough\n *   * Arc2TransactionNote object: ARC-0002 compatible transaction note\n *   * Else: The object/value converted into a JSON string representation\n */\nexport function encodeTransactionNote(note?: TransactionNote): Uint8Array | undefined {\n  if (note == null || typeof note === 'undefined') {\n    return undefined\n  } else if (typeof note === 'object' && note.constructor === Uint8Array) {\n    return note\n  } else if (typeof note === 'object' && 'dAppName' in note) {\n    const arc2Payload = `${note.dAppName}:${note.format}${typeof note.data === 'string' ? note.data : JSON.stringify(note.data)}`\n    const encoder = new TextEncoder()\n    return encoder.encode(arc2Payload)\n  } else {\n    const n = typeof note === 'string' ? note : JSON.stringify(note)\n    const encoder = new TextEncoder()\n    return encoder.encode(n)\n  }\n}\n\n/** Encodes a transaction lease into a 32-byte array ready to be included in an Algorand transaction.\n *\n * @param lease The transaction lease as a string or binary array or null/undefined if there is no lease\n * @returns the transaction lease ready for inclusion in a transaction or `undefined` if there is no lease\n * @throws if the length of the data is > 32 bytes or empty\n * @example algokit.encodeLease('UNIQUE_ID')\n * @example algokit.encodeLease(new Uint8Array([1, 2, 3]))\n */\nexport function encodeLease(lease?: string | Uint8Array): Uint8Array | undefined {\n  if (lease === null || typeof lease === 'undefined') {\n    return undefined\n  } else if (typeof lease === 'object' && lease.constructor === Uint8Array) {\n    if (lease.length === 0 || lease.length > 32) {\n      throw new Error(\n        `Received invalid lease; expected something with length between 1 and 32, but received bytes with length ${lease.length}`,\n      )\n    }\n    if (lease.length === 32) return lease\n    const lease32 = new Uint8Array(32)\n    lease32.set(lease, 0)\n    return lease32\n  } else if (typeof lease === 'string') {\n    if (lease.length === 0 || lease.length > 32) {\n      throw new Error(\n        `Received invalid lease; expected something with length between 1 and 32, but received '${lease}' with length ${lease.length}`,\n      )\n    }\n    const encoder = new TextEncoder()\n    const lease32 = new Uint8Array(32)\n    lease32.set(encoder.encode(lease), 0)\n    return lease32\n  } else {\n    throw new Error(`Unknown lease type received of ${typeof lease}`)\n  }\n}\n\n/**\n * @deprecated Use `algorand.client` to interact with accounts, and use `.addr` to get the address\n * and/or move from using `SendTransactionFrom` to `TransactionSignerAccount` and use `.addr` instead.\n *\n * Returns the public address of the given transaction sender.\n * @param sender A transaction sender\n * @returns The public address\n */\nexport const getSenderAddress = function (sender: string | SendTransactionFrom) {\n  return typeof sender === 'string' ? sender : 'addr' in sender ? sender.addr : sender.address()\n}\n\n/**\n * @deprecated Use `AlgorandClient` / `AlgoKitComposer` to construct transactions instead or\n * construct an `algosdk.TransactionWithSigner` manually instead.\n *\n * Given a transaction in a variety of supported formats, returns a TransactionWithSigner object ready to be passed to an\n * AtomicTransactionComposer's addTransaction method.\n * @param transaction One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the\n * signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by\n * one of algokit utils' helpers (signer is obtained from the defaultSender parameter)\n * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not\n * include a signer.\n * @returns A TransactionWithSigner object.\n */\nexport const getTransactionWithSigner = async (\n  transaction: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,\n  defaultSender?: SendTransactionFrom,\n): Promise<TransactionWithSigner> => {\n  if ('txn' in transaction) return transaction\n  if (defaultSender === undefined)\n    throw new Error('Default sender must be provided when passing in a transaction object that does not contain its own signer')\n  return transaction instanceof Promise\n    ? {\n        txn: (await transaction).transaction,\n        signer: getSenderTransactionSigner(defaultSender),\n      }\n    : 'transaction' in transaction\n      ? {\n          txn: transaction.transaction,\n          signer: getSenderTransactionSigner(transaction.signer),\n        }\n      : {\n          txn: transaction,\n          signer: getSenderTransactionSigner(defaultSender),\n        }\n}\n\nconst memoize = <T = unknown, R = unknown>(fn: (val: T) => R) => {\n  const cache = new Map()\n  const cached = function (this: unknown, val: T) {\n    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val)\n  }\n  cached.cache = cache\n  return cached as (val: T) => R\n}\n\n/**\n * @deprecated Use `TransactionSignerAccount` instead of `SendTransactionFrom` or use\n * `algosdk.makeBasicAccountTransactionSigner` / `algosdk.makeLogicSigAccountTransactionSigner`.\n *\n * Returns a `TransactionSigner` for the given transaction sender.\n * This function has memoization, so will return the same transaction signer for a given sender.\n * @param sender A transaction sender\n * @returns A transaction signer\n */\nexport const getSenderTransactionSigner = memoize(function (sender: SendTransactionFrom): TransactionSigner {\n  return 'signer' in sender\n    ? sender.signer\n    : 'lsig' in sender\n      ? algosdk.makeLogicSigAccountTransactionSigner(sender)\n      : algosdk.makeBasicAccountTransactionSigner(sender)\n})\n\n/**\n * @deprecated Use `AlgorandClient` / `AlgoKitComposer` to sign transactions\n * or use the relevant underlying `account.signTxn` / `algosdk.signLogicSigTransactionObject`\n * / `multiSigAccount.sign` / `TransactionSigner` methods directly.\n *\n * Signs a single transaction by the given signer.\n * @param transaction The transaction to sign\n * @param signer The signer to sign\n * @returns The signed transaction as a `Uint8Array`\n */\nexport const signTransaction = async (transaction: Transaction, signer: SendTransactionFrom) => {\n  return 'sk' in signer\n    ? transaction.signTxn(signer.sk)\n    : 'lsig' in signer\n      ? algosdk.signLogicSigTransactionObject(transaction, signer).blob\n      : 'sign' in signer\n        ? signer.sign(transaction)\n        : (await signer.signer([transaction], [0]))[0]\n}\n\n/**\n * @deprecated Use `AlgorandClient` / `AlgoKitComposer` to send transactions.\n *\n * Prepares a transaction for sending and then (if instructed) signs and sends the given transaction to the chain.\n *\n * @param send The details for the transaction to prepare/send, including:\n *   * `transaction`: The unsigned transaction\n *   * `from`: The account to sign the transaction with: either an account with private key loaded or a logic signature account\n *   * `config`: The sending configuration for this transaction\n * @param algod An algod client\n *\n * @returns An object with transaction (`transaction`) and (if `skipWaiting` is `false` or `undefined`) confirmation (`confirmation`)\n */\nexport const sendTransaction = async function (\n  send: {\n    transaction: Transaction\n    from: SendTransactionFrom\n    sendParams?: SendTransactionParams\n  },\n  algod: Algodv2,\n): Promise<SendTransactionResult> {\n  const { transaction, from, sendParams } = send\n  const { skipSending, skipWaiting, fee, maxFee, suppressLog, maxRoundsToWaitForConfirmation, atc } = sendParams ?? {}\n\n  controlFees(transaction, { fee, maxFee })\n\n  if (atc) {\n    atc.addTransaction({ txn: transaction, signer: getSenderTransactionSigner(from) })\n    return { transaction }\n  }\n\n  if (skipSending) {\n    return { transaction }\n  }\n\n  let txnToSend = transaction\n\n  const populateResources = sendParams?.populateAppCallResources ?? Config.populateAppCallResources\n\n  // Populate  resources if the transaction is an appcall and populateAppCallResources wasn't explicitly set to false\n  // NOTE: Temporary false by default until this algod bug is fixed: https://github.com/algorand/go-algorand/issues/5914\n  if (txnToSend.type === algosdk.TransactionType.appl && populateResources) {\n    const newAtc = new AtomicTransactionComposer()\n    newAtc.addTransaction({ txn: txnToSend, signer: getSenderTransactionSigner(from) })\n    const packed = await populateAppCallResources(newAtc, algod)\n    txnToSend = packed.buildGroup()[0].txn\n  }\n\n  const signedTransaction = await signTransaction(txnToSend, from)\n\n  await algod.sendRawTransaction(signedTransaction).do()\n\n  Config.getLogger(suppressLog).verbose(`Sent transaction ID ${txnToSend.txID()} ${txnToSend.type} from ${getSenderAddress(from)}`)\n\n  let confirmation: modelsv2.PendingTransactionResponse | undefined = undefined\n  if (!skipWaiting) {\n    confirmation = await waitForConfirmation(txnToSend.txID(), maxRoundsToWaitForConfirmation ?? 5, algod)\n  }\n\n  return { transaction: txnToSend, confirmation }\n}\n\n/**\n * Get all of the unamed resources used by the group in the given ATC\n *\n * @param algod The algod client to use for the simulation\n * @param atc The ATC containing the txn group\n * @returns The unnamed resources accessed by the group and by each transaction in the group\n */\nasync function getUnnamedAppCallResourcesAccessed(atc: algosdk.AtomicTransactionComposer, algod: algosdk.Algodv2) {\n  const simReq = new algosdk.modelsv2.SimulateRequest({\n    txnGroups: [],\n    allowUnnamedResources: true,\n    allowEmptySignatures: true,\n  })\n\n  const signerWithFixedSgnr: algosdk.TransactionSigner = async (txns: algosdk.Transaction[], indexes: number[]) => {\n    const stxns = await algosdk.makeEmptyTransactionSigner()(txns, indexes)\n    return Promise.all(\n      stxns.map(async (stxn) => {\n        const decodedStxn = algosdk.decodeSignedTransaction(stxn)\n        const sender = algosdk.encodeAddress(decodedStxn.txn.from.publicKey)\n\n        const authAddr = (await algod.accountInformation(sender).do())['auth-addr']\n\n        const stxnObj: { txn: algosdk.EncodedTransaction; sgnr?: Buffer } = { txn: decodedStxn.txn.get_obj_for_encoding() }\n\n        if (authAddr !== undefined) {\n          stxnObj.sgnr = Buffer.from(algosdk.decodeAddress(authAddr).publicKey)\n        }\n\n        return algosdk.encodeObj(stxnObj)\n      }),\n    )\n  }\n\n  const emptySignerAtc = atc.clone()\n  emptySignerAtc['transactions'].forEach((t: algosdk.TransactionWithSigner) => {\n    t.signer = signerWithFixedSgnr\n  })\n\n  const result = await emptySignerAtc.simulate(algod, simReq)\n\n  const groupResponse = result.simulateResponse.txnGroups[0]\n\n  if (groupResponse.failureMessage) {\n    throw Error(`Error during resource population simulation in transaction ${groupResponse.failedAt}: ${groupResponse.failureMessage}`)\n  }\n\n  return {\n    group: groupResponse.unnamedResourcesAccessed,\n    txns: groupResponse.txnResults.map(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (t: any) => t.unnamedResourcesAccessed,\n    ) as algosdk.modelsv2.SimulateUnnamedResourcesAccessed[],\n  }\n}\n\n/**\n * Take an existing Atomic Transaction Composer and return a new one with the required\n *  app call resources packed into it\n *\n * @param algod The algod client to use for the simulation\n * @param atc The ATC containing the txn group\n * @returns A new ATC with the resources packed into the transactions\n *\n * @privateRemarks\n *\n * This entire function will eventually be implemented in simulate upstream in algod. The simulate endpoint will return\n * an array of refference arrays for each transaction, so this eventually will eventually just call simulate and set the\n * reference arrays in the transactions to the reference arrays returned by simulate.\n *\n * See https://github.com/algorand/go-algorand/pull/5684\n *\n */\nexport async function populateAppCallResources(atc: algosdk.AtomicTransactionComposer, algod: algosdk.Algodv2) {\n  const unnamedResourcesAccessed = await getUnnamedAppCallResourcesAccessed(atc, algod)\n  const group = atc.buildGroup()\n\n  unnamedResourcesAccessed.txns.forEach((r, i) => {\n    if (r === undefined) return\n\n    if (r.boxes || r.extraBoxRefs) throw Error('Unexpected boxes at the transaction level')\n    if (r.appLocals) throw Error('Unexpected app local at the transaction level')\n    if (r.assetHoldings) throw Error('Unexpected asset holding at the transaction level')\n\n    // Do accounts first because the account limit is 4\n    r.accounts?.forEach((a) => {\n      group[i].txn.appAccounts = [...(group[i].txn.appAccounts ?? []), algosdk.decodeAddress(a)]\n    })\n\n    r.apps?.forEach((a) => {\n      group[i].txn.appForeignApps = [...(group[i].txn.appForeignApps ?? []), Number(a)]\n    })\n\n    r.assets?.forEach((a) => {\n      group[i].txn.appForeignAssets = [...(group[i].txn.appForeignAssets ?? []), Number(a)]\n    })\n\n    const accounts = group[i].txn.appAccounts?.length || 0\n    if (accounts > MAX_APP_CALL_ACCOUNT_REFERENCES)\n      throw Error(`Account reference limit of ${MAX_APP_CALL_ACCOUNT_REFERENCES} exceeded in transaction ${i}`)\n\n    const assets = group[i].txn.appForeignAssets?.length || 0\n    const apps = group[i].txn.appForeignApps?.length || 0\n    const boxes = group[i].txn.boxes?.length || 0\n\n    if (accounts + assets + apps + boxes > MAX_APP_CALL_FOREIGN_REFERENCES) {\n      throw Error(`Resource reference limit of ${MAX_APP_CALL_FOREIGN_REFERENCES} exceeded in transaction ${i}`)\n    }\n  })\n\n  const populateGroupResource = (\n    txns: algosdk.TransactionWithSigner[],\n    reference:\n      | string\n      | algosdk.modelsv2.BoxReference\n      | algosdk.modelsv2.ApplicationLocalReference\n      | algosdk.modelsv2.AssetHoldingReference\n      | bigint\n      | number,\n    type: 'account' | 'assetHolding' | 'appLocal' | 'app' | 'box' | 'asset',\n  ): void => {\n    const isApplBelowLimit = (t: algosdk.TransactionWithSigner) => {\n      if (t.txn.type !== algosdk.TransactionType.appl) return false\n\n      const accounts = t.txn.appAccounts?.length || 0\n      const assets = t.txn.appForeignAssets?.length || 0\n      const apps = t.txn.appForeignApps?.length || 0\n      const boxes = t.txn.boxes?.length || 0\n\n      return accounts + assets + apps + boxes < MAX_APP_CALL_FOREIGN_REFERENCES\n    }\n\n    // If this is a asset holding or app local, first try to find a transaction that already has the account available\n    if (type === 'assetHolding' || type === 'appLocal') {\n      const { account } = reference as algosdk.modelsv2.ApplicationLocalReference | algosdk.modelsv2.AssetHoldingReference\n\n      let txnIndex = txns.findIndex((t) => {\n        if (!isApplBelowLimit(t)) return false\n\n        return (\n          // account is in the foreign accounts array\n          t.txn.appAccounts?.map((a) => algosdk.encodeAddress(a.publicKey)).includes(account) ||\n          // account is available as an app account\n          t.txn.appForeignApps?.map((a) => algosdk.getApplicationAddress(a)).includes(account) ||\n          // account is available since it's in one of the fields\n          Object.values(t.txn)\n            .map((f) => JSON.stringify(f))\n            .includes(JSON.stringify(algosdk.decodeAddress(account)))\n        )\n      })\n\n      if (txnIndex > -1) {\n        if (type === 'assetHolding') {\n          const { asset } = reference as algosdk.modelsv2.AssetHoldingReference\n          txns[txnIndex].txn.appForeignAssets = [...(txns[txnIndex].txn.appForeignAssets ?? []), Number(asset)]\n        } else {\n          const { app } = reference as algosdk.modelsv2.ApplicationLocalReference\n          txns[txnIndex].txn.appForeignApps = [...(txns[txnIndex].txn.appForeignApps ?? []), Number(app)]\n        }\n        return\n      }\n\n      // Now try to find a txn that already has that app or asset available\n      txnIndex = txns.findIndex((t) => {\n        if (!isApplBelowLimit(t)) return false\n\n        // check if there is space in the accounts array\n        if ((t.txn.appAccounts?.length || 0) >= MAX_APP_CALL_ACCOUNT_REFERENCES) return false\n\n        if (type === 'assetHolding') {\n          const { asset } = reference as algosdk.modelsv2.AssetHoldingReference\n          return t.txn.appForeignAssets?.includes(Number(asset))\n        } else {\n          const { app } = reference as algosdk.modelsv2.ApplicationLocalReference\n          return t.txn.appForeignApps?.includes(Number(app)) || t.txn.appIndex === Number(app)\n        }\n      })\n\n      if (txnIndex > -1) {\n        const { account } = reference as algosdk.modelsv2.AssetHoldingReference | algosdk.modelsv2.ApplicationLocalReference\n\n        txns[txnIndex].txn.appAccounts = [...(txns[txnIndex].txn.appAccounts ?? []), algosdk.decodeAddress(account)]\n\n        return\n      }\n    }\n\n    // If this is a box, first try to find a transaction that already has the app available\n    if (type === 'box') {\n      const { app, name } = reference as algosdk.modelsv2.BoxReference\n\n      const txnIndex = txns.findIndex((t) => {\n        if (!isApplBelowLimit(t)) return false\n\n        // If the app is in the foreign array OR the app being called, then we know it's available\n        return t.txn.appForeignApps?.includes(Number(app)) || t.txn.appIndex === Number(app)\n      })\n\n      if (txnIndex > -1) {\n        txns[txnIndex].txn.boxes = [...(txns[txnIndex].txn.boxes ?? []), { appIndex: Number(app), name }]\n\n        return\n      }\n    }\n\n    // Find the txn index to put the reference(s)\n    const txnIndex = txns.findIndex((t) => {\n      if (t.txn.type !== algosdk.TransactionType.appl) return false\n\n      const accounts = t.txn.appAccounts?.length || 0\n      if (type === 'account') return accounts < MAX_APP_CALL_ACCOUNT_REFERENCES\n\n      const assets = t.txn.appForeignAssets?.length || 0\n      const apps = t.txn.appForeignApps?.length || 0\n      const boxes = t.txn.boxes?.length || 0\n\n      // If we're adding local state or asset holding, we need space for the acocunt and the other reference\n      if (type === 'assetHolding' || type === 'appLocal') {\n        return accounts + assets + apps + boxes < MAX_APP_CALL_FOREIGN_REFERENCES - 1 && accounts < MAX_APP_CALL_ACCOUNT_REFERENCES\n      }\n\n      // If we're adding a box, we need space for both the box ref and the app ref\n      if (type === 'box' && BigInt((reference as algosdk.modelsv2.BoxReference).app) !== BigInt(0)) {\n        return accounts + assets + apps + boxes < MAX_APP_CALL_FOREIGN_REFERENCES - 1\n      }\n\n      return accounts + assets + apps + boxes < MAX_APP_CALL_FOREIGN_REFERENCES\n    })\n\n    if (txnIndex === -1) {\n      throw Error('No more transactions below reference limit. Add another app call to the group.')\n    }\n\n    if (type === 'account') {\n      txns[txnIndex].txn.appAccounts = [...(txns[txnIndex].txn.appAccounts ?? []), algosdk.decodeAddress(reference as string)]\n    } else if (type === 'app') {\n      txns[txnIndex].txn.appForeignApps = [...(txns[txnIndex].txn.appForeignApps ?? []), Number(reference)]\n    } else if (type === 'box') {\n      const { app, name } = reference as algosdk.modelsv2.BoxReference\n      txns[txnIndex].txn.boxes = [...(txns[txnIndex].txn.boxes ?? []), { appIndex: Number(app), name }]\n\n      if (app.toString() !== '0') {\n        txns[txnIndex].txn.appForeignApps = [...(txns[txnIndex].txn.appForeignApps ?? []), Number(app)]\n      }\n    } else if (type === 'assetHolding') {\n      const { asset, account } = reference as algosdk.modelsv2.AssetHoldingReference\n      txns[txnIndex].txn.appForeignAssets = [...(txns[txnIndex].txn.appForeignAssets ?? []), Number(asset)]\n      txns[txnIndex].txn.appAccounts = [...(txns[txnIndex].txn.appAccounts ?? []), algosdk.decodeAddress(account)]\n    } else if (type === 'appLocal') {\n      const { app, account } = reference as algosdk.modelsv2.ApplicationLocalReference\n      txns[txnIndex].txn.appAccounts = [...(txns[txnIndex].txn.appAccounts ?? []), algosdk.decodeAddress(account)]\n      txns[txnIndex].txn.appForeignApps = [...(txns[txnIndex].txn.appForeignApps ?? []), Number(app)]\n    } else if (type === 'asset') {\n      txns[txnIndex].txn.appForeignAssets = [...(txns[txnIndex].txn.appForeignAssets ?? []), Number(reference)]\n    }\n  }\n\n  const g = unnamedResourcesAccessed.group\n\n  if (g) {\n    // Do cross-reference resources first because they are the most restrictive in terms\n    // of which transactions can be used\n    g.appLocals?.forEach((a) => {\n      populateGroupResource(group, a, 'appLocal')\n\n      // Remove resources from the group if we're adding them here\n      g.accounts = g.accounts?.filter((acc) => acc !== a.account)\n      g.apps = g.apps?.filter((app) => BigInt(app) !== BigInt(a.app))\n    })\n\n    g.assetHoldings?.forEach((a) => {\n      populateGroupResource(group, a, 'assetHolding')\n\n      // Remove resources from the group if we're adding them here\n      g.accounts = g.accounts?.filter((acc) => acc !== a.account)\n      g.assets = g.assets?.filter((asset) => BigInt(asset) !== BigInt(a.asset))\n    })\n\n    // Do accounts next because the account limit is 4\n    g.accounts?.forEach((a) => {\n      populateGroupResource(group, a, 'account')\n    })\n\n    g.boxes?.forEach((b) => {\n      populateGroupResource(group, b, 'box')\n\n      // Remove apps as resource from the group if we're adding it here\n      g.apps = g.apps?.filter((app) => BigInt(app) !== BigInt(b.app))\n    })\n\n    g.assets?.forEach((a) => {\n      populateGroupResource(group, a, 'asset')\n    })\n\n    g.apps?.forEach((a) => {\n      populateGroupResource(group, a, 'app')\n    })\n\n    if (g.extraBoxRefs) {\n      for (let i = 0; i < g.extraBoxRefs; i += 1) {\n        const ref = new algosdk.modelsv2.BoxReference({ app: 0, name: new Uint8Array(0) })\n        populateGroupResource(group, ref, 'box')\n      }\n    }\n  }\n\n  const newAtc = new algosdk.AtomicTransactionComposer()\n\n  group.forEach((t) => {\n    // eslint-disable-next-line no-param-reassign\n    t.txn.group = undefined\n    newAtc.addTransaction(t)\n  })\n\n  newAtc['methodCalls'] = atc['methodCalls']\n  return newAtc\n}\n\n/**\n * Signs and sends transactions that have been collected by an `AtomicTransactionComposer`.\n * @param atcSend The parameters controlling the send, including `atc` The `AtomicTransactionComposer` and params to control send behaviour\n * @param algod An algod client\n * @returns An object with transaction IDs, transactions, group transaction ID (`groupTransactionId`) if more than 1 transaction sent, and (if `skipWaiting` is `false` or unset) confirmation (`confirmation`)\n */\nexport const sendAtomicTransactionComposer = async function (atcSend: AtomicTransactionComposerToSend, algod: Algodv2) {\n  const { atc: givenAtc, sendParams, ...executeParams } = atcSend\n\n  let atc: AtomicTransactionComposer\n\n  // const hasAppCalls = () =>\n  //   givenAtc\n  //     .buildGroup()\n  //     .map((t) => t.txn.type)\n  //     .includes(algosdk.TransactionType.appl)\n\n  atc = givenAtc\n  try {\n    // If populateAppCallResources is true OR if populateAppCallResources is undefined and there are app calls, then populate resources\n    // NOTE: Temporary false by default until this algod bug is fixed: https://github.com/algorand/go-algorand/issues/5914\n    const populateResources =\n      executeParams?.populateAppCallResources ?? sendParams?.populateAppCallResources ?? Config.populateAppCallResources\n\n    if (populateResources) {\n      atc = await populateAppCallResources(givenAtc, algod)\n    }\n\n    const transactionsWithSigner = atc.buildGroup()\n\n    const transactionsToSend = transactionsWithSigner.map((t) => {\n      return t.txn\n    })\n    let groupId: string | undefined = undefined\n    if (transactionsToSend.length > 1) {\n      groupId = transactionsToSend[0].group ? Buffer.from(transactionsToSend[0].group).toString('base64') : ''\n      Config.getLogger(executeParams?.suppressLog ?? sendParams?.suppressLog).verbose(\n        `Sending group of ${transactionsToSend.length} transactions (${groupId})`,\n        {\n          transactionsToSend,\n        },\n      )\n\n      Config.getLogger(executeParams?.suppressLog ?? sendParams?.suppressLog).debug(\n        `Transaction IDs (${groupId})`,\n        transactionsToSend.map((t) => t.txID()),\n      )\n    }\n\n    if (Config.debug && Config.traceAll) {\n      // Dump the traces to a file for use with AlgoKit AVM debugger\n      const simulateResponse = await performAtomicTransactionComposerSimulate(atc, algod)\n      await Config.events.emitAsync(EventType.TxnGroupSimulated, {\n        simulateResponse,\n      })\n    }\n    const result = await atc.execute(\n      algod,\n      executeParams?.maxRoundsToWaitForConfirmation ?? sendParams?.maxRoundsToWaitForConfirmation ?? 5,\n    )\n\n    if (transactionsToSend.length > 1) {\n      Config.getLogger(executeParams?.suppressLog ?? sendParams?.suppressLog).verbose(\n        `Group transaction (${groupId}) sent with ${transactionsToSend.length} transactions`,\n      )\n    } else {\n      Config.getLogger(executeParams?.suppressLog ?? sendParams?.suppressLog).verbose(\n        `Sent transaction ID ${transactionsToSend[0].txID()} ${transactionsToSend[0].type} from ${algosdk.encodeAddress(\n          transactionsToSend[0].from.publicKey,\n        )}`,\n      )\n    }\n\n    let confirmations: modelsv2.PendingTransactionResponse[] | undefined = undefined\n    if (!sendParams?.skipWaiting) {\n      confirmations = await Promise.all(\n        transactionsToSend.map(async (t) =>\n          modelsv2.PendingTransactionResponse.from_obj_for_encoding(await algod.pendingTransactionInformation(t.txID()).do()),\n        ),\n      )\n    }\n\n    return {\n      groupId,\n      confirmations,\n      txIds: transactionsToSend.map((t) => t.txID()),\n      transactions: transactionsToSend,\n      returns: result.methodResults.map(\n        (r) =>\n          ({\n            decodeError: r.decodeError,\n            returnValue: r.returnValue,\n            rawReturnValue: r.rawReturnValue,\n          }) as ABIReturn,\n      ),\n    } as SendAtomicTransactionComposerResults\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (e: any) {\n    // Create a new error object so the stack trace is correct (algosdk throws an error with a more limited stack trace)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const err = new Error(typeof e === 'object' ? e?.message : 'Received error executing Atomic Transaction Composer') as any as any\n    err.cause = e\n    if (typeof e === 'object') {\n      // Remove headers as it doesn't have anything useful.\n      delete e.response?.headers\n      err.response = e.response\n      err.name = e.name\n    }\n\n    if (Config.debug && typeof e === 'object') {\n      err.traces = []\n      Config.logger.error(\n        'Received error executing Atomic Transaction Composer and debug flag enabled; attempting simulation to get more information',\n        err,\n      )\n      const simulate = await performAtomicTransactionComposerSimulate(atc, algod)\n      if (Config.debug && !Config.traceAll) {\n        await Config.events.emitAsync(EventType.TxnGroupSimulated, {\n          simulateResponse: simulate,\n        })\n      }\n\n      if (simulate && simulate.txnGroups[0].failedAt) {\n        for (const txn of simulate.txnGroups[0].txnResults) {\n          err.traces.push({\n            trace: txn.execTrace?.get_obj_for_encoding(),\n            appBudget: txn.appBudgetConsumed,\n            logicSigBudget: txn.logicSigBudgetConsumed,\n            logs: txn.txnResult.logs,\n            message: simulate.txnGroups[0].failureMessage,\n          })\n        }\n      }\n    } else {\n      Config.logger.error('Received error executing Atomic Transaction Composer, for more information enable the debug flag', err)\n    }\n    throw err\n  }\n}\n\n/**\n * @deprecated Use `performAtomicTransactionComposerSimulate`, dry-run is a deprecated Algorand feature.\n *\n * Performs a dry run of the transactions loaded into the given AtomicTransactionComposer`\n * @param atc The AtomicTransactionComposer` with transaction(s) loaded\n * @param algod An Algod client\n * @returns The dryrun result\n */\nexport async function performAtomicTransactionComposerDryrun(atc: AtomicTransactionComposer, algod: Algodv2) {\n  const signedTransactions = await atc.gatherSignatures()\n  const txns = signedTransactions.map((t) => {\n    return algosdk.decodeSignedTransaction(t)\n  })\n  const dryrun = await algosdk.createDryrun({ client: algod, txns })\n  return new algosdk.DryrunResult(await algod.dryrun(dryrun).do())\n}\n\n/**\n * @deprecated Use `AlgoKitComposer` (`algorand.newGroup()`) or `AtomicTransactionComposer` to construct and send group transactions instead.\n *\n * Signs and sends a group of [up to 16](https://developer.algorand.org/docs/get-details/atomic_transfers/#create-transactions) transactions to the chain\n *\n * @param groupSend The group details to send, with:\n *   * `transactions`: The array of transactions to send along with their signing account\n *   * `sendParams`: The parameters to dictate how the group is sent\n * @param algod An algod client\n * @returns An object with transaction IDs, transactions, group transaction ID (`groupTransactionId`) if more than 1 transaction sent, and (if `skipWaiting` is `false` or unset) confirmation (`confirmation`)\n */\nexport const sendGroupOfTransactions = async function (groupSend: TransactionGroupToSend, algod: Algodv2) {\n  const { transactions, signer, sendParams } = groupSend\n\n  const defaultTransactionSigner = signer ? getSenderTransactionSigner(signer) : undefined\n\n  const transactionsWithSigner = await Promise.all(\n    transactions.map(async (t) => {\n      if ('signer' in t)\n        return {\n          txn: t.transaction,\n          signer: getSenderTransactionSigner(t.signer),\n          sender: t.signer,\n        }\n\n      const txn = 'then' in t ? (await t).transaction : t\n      if (!signer) {\n        throw new Error(`Attempt to send transaction ${txn.txID()} as part of a group transaction, but no signer parameter was provided.`)\n      }\n\n      return {\n        txn,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        signer: defaultTransactionSigner!,\n        sender: signer,\n      }\n    }),\n  )\n\n  const atc = new AtomicTransactionComposer()\n  transactionsWithSigner.forEach((txn) => atc.addTransaction(txn))\n\n  return (await sendAtomicTransactionComposer({ atc, sendParams }, algod)) as Omit<SendAtomicTransactionComposerResults, 'returns'>\n}\n\n/**\n * Wait until the transaction is confirmed or rejected, or until `timeout`\n * number of rounds have passed.\n *\n * @param algod An algod client\n * @param transactionId The transaction ID to wait for\n * @param maxRoundsToWait Maximum number of rounds to wait\n *\n * @return Pending transaction information\n * @throws Throws an error if the transaction is not confirmed or rejected in the next `timeout` rounds\n */\nexport const waitForConfirmation = async function (\n  transactionId: string,\n  maxRoundsToWait: number | bigint,\n  algod: Algodv2,\n): Promise<modelsv2.PendingTransactionResponse> {\n  if (maxRoundsToWait < 0) {\n    throw new Error(`Invalid timeout, received ${maxRoundsToWait}, expected > 0`)\n  }\n\n  // Get current round\n  const status = modelsv2.NodeStatusResponse.from_obj_for_encoding(await algod.status().do())\n  if (status === undefined) {\n    throw new Error('Unable to get node status')\n  }\n\n  // Loop for up to `timeout` rounds looking for a confirmed transaction\n  const startRound = BigInt(status.lastRound) + 1n\n  let currentRound = startRound\n  while (currentRound < startRound + BigInt(maxRoundsToWait)) {\n    try {\n      const pendingInfo = modelsv2.PendingTransactionResponse.from_obj_for_encoding(\n        await algod.pendingTransactionInformation(transactionId).do(),\n      )\n      if (pendingInfo !== undefined) {\n        const confirmedRound = pendingInfo.confirmedRound\n        if (confirmedRound && confirmedRound > 0) {\n          return pendingInfo\n        } else {\n          const poolError = pendingInfo.poolError\n          if (poolError != null && poolError.length > 0) {\n            // If there was a pool error, then the transaction has been rejected!\n            throw new Error(`Transaction ${transactionId} was rejected; pool error: ${poolError}`)\n          }\n        }\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: unknown) {\n      if ((e as Error).name === 'URLTokenBaseHTTPError') {\n        currentRound++\n        continue\n      }\n    }\n\n    await algod.statusAfterBlock(toNumber(currentRound)).do()\n    currentRound++\n  }\n\n  throw new Error(`Transaction ${transactionId} not confirmed after ${maxRoundsToWait} rounds`)\n}\n\n/**\n * @deprecated Use `AlgoKitComposer` and the `maxFee` field in the transaction params instead.\n *\n * Limit the acceptable fee to a defined amount of µAlgo.\n * This also sets the transaction to be flatFee to ensure the transaction only succeeds at\n * the estimated rate.\n * @param transaction The transaction to cap or suggested params object about to be used to create a transaction\n * @param maxAcceptableFee The maximum acceptable fee to pay\n */\nexport function capTransactionFee(transaction: algosdk.Transaction | SuggestedParams, maxAcceptableFee: AlgoAmount) {\n  // If a flat fee hasn't already been defined\n  if (!transaction.flatFee) {\n    // Once a transaction has been constructed by algosdk, transaction.fee indicates what the total transaction fee\n    // Will be based on the current suggested fee-per-byte value.\n    if (transaction.fee > maxAcceptableFee.microAlgo) {\n      throw new Error(\n        `Cancelled transaction due to high network congestion fees. Algorand suggested fees would cause this transaction to cost ${transaction.fee} µALGO. Cap for this transaction is ${maxAcceptableFee.microAlgo} µALGO.`,\n      )\n    } else if (transaction.fee > algosdk.ALGORAND_MIN_TX_FEE) {\n      Config.logger.warn(`Algorand network congestion fees are in effect. This transaction will incur a fee of ${transaction.fee} µALGO.`)\n    }\n\n    // Now set the flat on the transaction. Otherwise the network may increase the fee above our cap and perform the transaction.\n    transaction.flatFee = true\n  }\n}\n\n/**\n * @deprecated Use `AlgoKitComposer` and the `maxFee` and `staticFee` fields in the transaction params instead.\n *\n * Allows for control of fees on a `Transaction` or `SuggestedParams` object\n * @param transaction The transaction or suggested params\n * @param feeControl The fee control parameters\n */\nexport function controlFees<T extends SuggestedParams | Transaction>(\n  transaction: T,\n  feeControl: { fee?: AlgoAmount; maxFee?: AlgoAmount },\n) {\n  const { fee, maxFee } = feeControl\n  if (fee) {\n    transaction.fee = Number(fee.microAlgo)\n    transaction.flatFee = true\n  }\n\n  if (maxFee !== undefined) {\n    capTransactionFee(transaction, maxFee)\n  }\n\n  return transaction\n}\n\n/**\n * @deprecated Use `suggestedParams ? { ...suggestedParams } : await algod.getTransactionParams().do()` instead\n *\n * Returns suggested transaction parameters from algod unless some are already provided.\n * @param params Optionally provide parameters to use\n * @param algod Algod algod\n * @returns The suggested transaction parameters\n */\nexport async function getTransactionParams(params: SuggestedParams | undefined, algod: Algodv2) {\n  return params ? { ...params } : await algod.getTransactionParams().do()\n}\n\n/**\n * @deprecated Use `atc.clone().buildGroup()` instead.\n *\n * Returns the array of transactions currently present in the given `AtomicTransactionComposer`\n * @param atc The atomic transaction composer\n * @returns The array of transactions with signers\n */\nexport function getAtomicTransactionComposerTransactions(atc: AtomicTransactionComposer) {\n  try {\n    return atc.clone().buildGroup()\n  } catch {\n    return []\n  }\n}\n"],"names":[],"mappings":"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"}