import { AlgorandClient } from '../../types/algorand-client.mjs';
import { ClientManager } from '../../types/client-manager.mjs';
import { getTestAccount } from '../account.mjs';
import { runWhenIndexerCaughtUp } from '../indexer.mjs';
import { TransactionLogger } from '../transaction-logger.mjs';
import { algos } from '../../amount.mjs';
import { lookupTransactionById } from '../../indexer-lookup.mjs';
import { Config } from '../../config.mjs';

function algorandFixture(fixtureConfig, config) {
    fixtureConfig = { ...fixtureConfig, ...config };
    if (!fixtureConfig.algod || !fixtureConfig.indexer || !fixtureConfig.kmd) {
        fixtureConfig = { ...ClientManager.getConfigFromEnvironmentOrLocalNet(), ...fixtureConfig };
    }
    const algod = fixtureConfig.algod ?? ClientManager.getAlgodClient(fixtureConfig.algodConfig);
    const indexer = fixtureConfig.indexer ?? ClientManager.getIndexerClient(fixtureConfig.indexerConfig);
    const kmd = fixtureConfig.kmd ?? ClientManager.getKmdClient(fixtureConfig.kmdConfig);
    let context;
    let algorand;
    const beforeEach = async () => {
        Config.configure({ debug: true });
        const transactionLogger = new TransactionLogger();
        const transactionLoggerAlgod = transactionLogger.capture(algod);
        algorand = AlgorandClient.fromClients({ algod: transactionLoggerAlgod, indexer, kmd });
        const acc = await getTestAccount({ initialFunds: fixtureConfig?.testAccountFunding ?? algos(10), suppressLog: true }, algorand);
        algorand.setSignerFromAccount(acc).setSuggestedParamsCacheTimeout(0);
        // If running against LocalNet we are likely in dev mode and we need to set a much higher validity window
        //  otherwise we are more likely to get invalid transactions.
        if (await algorand.client.isLocalNet()) {
            algorand.setDefaultValidityWindow(1000);
        }
        const testAccount = { ...acc, signer: algorand.account.getSigner(acc.addr) };
        context = {
            algorand,
            algod: transactionLoggerAlgod,
            indexer: indexer,
            kmd: kmd,
            testAccount,
            generateAccount: async (params) => {
                const account = await getTestAccount(params, algorand);
                algorand.setSignerFromAccount(account);
                return { ...account, signer: algorand.account.getSigner(account.addr) };
            },
            transactionLogger: transactionLogger,
            waitForIndexer: () => transactionLogger.waitForIndexer(indexer),
            waitForIndexerTransaction: (transactionId) => runWhenIndexerCaughtUp(() => lookupTransactionById(transactionId, indexer)),
        };
    };
    return {
        get context() {
            return context;
        },
        get algorand() {
            return algorand;
        },
        beforeEach,
    };
}

export { algorandFixture };
//# sourceMappingURL=algorand-fixture.mjs.map
