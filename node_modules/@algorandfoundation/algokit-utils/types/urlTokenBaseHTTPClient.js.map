{"version":3,"file":"urlTokenBaseHTTPClient.js","sources":["../../src/types/urlTokenBaseHTTPClient.ts"],"sourcesContent":["// Copied from https://github.com/algorand/js-algorand-sdk/blob/e9635e9ffc9019994f0790ee4b8d9733c6590250/src/client/urlTokenBaseHTTPClient.ts\n// There was an error trying to reference the file from algosdk\n// This is referenced from algo-http-client-with-retry.ts and extended to add retry logic to improve resilience\n// todo: Find out why this can't be referenced from algosdk directly so we don't have to duplicate here\nimport type { BaseHTTPClient, BaseHTTPClientError, BaseHTTPClientResponse, Query } from 'algosdk/dist/types/client/baseHTTPClient'\nimport { Buffer } from 'buffer'\n\nexport interface AlgodTokenHeader {\n  'X-Algo-API-Token': string\n}\n\nexport interface IndexerTokenHeader {\n  'X-Indexer-API-Token': string\n}\n\nexport interface KMDTokenHeader {\n  'X-KMD-API-Token': string\n}\n\nexport interface CustomTokenHeader {\n  [headerName: string]: string\n}\n\nclass URLTokenBaseHTTPError extends Error implements BaseHTTPClientError {\n  constructor(\n    message: string,\n    public response: BaseHTTPClientResponse,\n  ) {\n    super(message)\n    this.name = 'URLTokenBaseHTTPError'\n    this.response = response\n  }\n}\n\nexport type TokenHeader = AlgodTokenHeader | IndexerTokenHeader | KMDTokenHeader | CustomTokenHeader\n\n/**\n * Implementation of BaseHTTPClient that uses a URL and a token\n * and make the REST queries using fetch.\n * This is the default implementation of BaseHTTPClient.\n */\nexport class URLTokenBaseHTTPClient implements BaseHTTPClient {\n  private readonly baseURL: URL\n  private readonly tokenHeader: TokenHeader\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(\n    tokenHeader: TokenHeader,\n    baseServer: string,\n    port?: string | number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private defaultHeaders: Record<string, any> = {},\n  ) {\n    // Append a trailing slash so we can use relative paths. Without the trailing\n    // slash, the last path segment will be replaced by the relative path. See\n    // usage in `addressWithPath`.\n    const fixedBaseServer = baseServer.endsWith('/') ? baseServer : `${baseServer}/`\n    const baseServerURL = new URL(fixedBaseServer)\n    if (typeof port !== 'undefined') {\n      baseServerURL.port = port.toString()\n    }\n\n    if (baseServerURL.protocol.length === 0) {\n      throw new Error('Invalid base server URL, protocol must be defined.')\n    }\n\n    this.baseURL = baseServerURL\n    this.tokenHeader = tokenHeader\n  }\n\n  /**\n   * Compute the URL for a path relative to the instance's address\n   * @param relativePath - A path string\n   * @param query - An optional key-value object of query parameters to add to the URL. If the\n   *   relativePath already has query parameters on it, the additional parameters defined here will\n   *   be added to the URL without modifying those (unless a key collision occurs).\n   * @returns A URL string\n   */\n  private getURL(relativePath: string, query?: Query<string>): string {\n    let fixedRelativePath: string\n    if (relativePath.startsWith('./')) {\n      fixedRelativePath = relativePath\n    } else if (relativePath.startsWith('/')) {\n      fixedRelativePath = `.${relativePath}`\n    } else {\n      fixedRelativePath = `./${relativePath}`\n    }\n    const address = new URL(fixedRelativePath, this.baseURL)\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        address.searchParams.set(key, value)\n      }\n    }\n    return address.toString()\n  }\n\n  private static formatFetchResponseHeaders(headers: Headers): Record<string, string> {\n    const headersObj: Record<string, string> = {}\n    headers.forEach((key, value) => {\n      headersObj[key] = value\n    })\n    return headersObj\n  }\n\n  private static async checkHttpError(res: Response) {\n    if (res.ok) {\n      return\n    }\n\n    let body: Uint8Array | null = null\n    let bodyErrorMessage: string | null = null\n\n    try {\n      body = new Uint8Array(await res.arrayBuffer())\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const decoded: Record<string, any> = JSON.parse(Buffer.from(body).toString())\n      if (decoded.message) {\n        bodyErrorMessage = decoded.message\n      }\n    } catch {\n      // ignore any error that happened while we are parsing the error response\n    }\n\n    let message = `Network request error. Received status ${res.status} (${res.statusText})`\n    if (bodyErrorMessage) {\n      message += `: ${bodyErrorMessage}`\n    }\n\n    throw new URLTokenBaseHTTPError(message, {\n      body: body !== null ? body : new Uint8Array(),\n      status: res.status,\n      headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers),\n    })\n  }\n\n  private static async formatFetchResponse(res: Response): Promise<BaseHTTPClientResponse> {\n    await this.checkHttpError(res)\n    return {\n      body: new Uint8Array(await res.arrayBuffer()),\n      status: res.status,\n      headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers),\n    }\n  }\n\n  async get(relativePath: string, query?: Query<string>, requestHeaders: Record<string, string> = {}): Promise<BaseHTTPClientResponse> {\n    // Expand headers for use in fetch\n    const headers = {\n      ...this.tokenHeader,\n      ...this.defaultHeaders,\n      ...requestHeaders,\n    }\n\n    const res = await fetch(this.getURL(relativePath, query), {\n      mode: 'cors',\n      headers,\n    })\n\n    return URLTokenBaseHTTPClient.formatFetchResponse(res)\n  }\n\n  async post(\n    relativePath: string,\n    data: Uint8Array,\n    query?: Query<string>,\n    requestHeaders: Record<string, string> = {},\n  ): Promise<BaseHTTPClientResponse> {\n    // Expand headers for use in fetch\n    const headers = {\n      ...this.tokenHeader,\n      ...this.defaultHeaders,\n      ...requestHeaders,\n    }\n\n    const res = await fetch(this.getURL(relativePath, query), {\n      method: 'POST',\n      mode: 'cors',\n      body: data,\n      headers,\n    })\n\n    return URLTokenBaseHTTPClient.formatFetchResponse(res)\n  }\n\n  async delete(\n    relativePath: string,\n    data: Uint8Array,\n    query?: Query<string>,\n    requestHeaders: Record<string, string> = {},\n  ): Promise<BaseHTTPClientResponse> {\n    // Expand headers for use in fetch\n    const headers = {\n      ...this.tokenHeader,\n      ...this.defaultHeaders,\n      ...requestHeaders,\n    }\n\n    const res = await fetch(this.getURL(relativePath, query), {\n      method: 'DELETE',\n      mode: 'cors',\n      body: data,\n      headers,\n    })\n\n    return URLTokenBaseHTTPClient.formatFetchResponse(res)\n  }\n}\n"],"names":["Buffer"],"mappings":"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"}