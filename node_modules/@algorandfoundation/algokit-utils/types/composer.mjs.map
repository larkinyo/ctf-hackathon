{"version":3,"file":"composer.mjs","sources":["../../src/types/composer.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport { Config } from '../config'\nimport { performAtomicTransactionComposerSimulate } from '../transaction/perform-atomic-transaction-composer-simulate'\nimport { encodeLease, sendAtomicTransactionComposer } from '../transaction/transaction'\nimport { TransactionSignerAccount } from './account'\nimport { AlgoAmount } from './amount'\nimport { ABIReturn, APP_PAGE_MAX_SIZE } from './app'\nimport { AppManager, BoxIdentifier, BoxReference } from './app-manager'\nimport { EventType } from './async-event-emitter'\nimport { Expand } from './expand'\nimport { genesisIdIsLocalNet } from './network-client'\nimport { Arc2TransactionNote, SendAtomicTransactionComposerResults, SendParams } from './transaction'\nimport Transaction = algosdk.Transaction\nimport TransactionSigner = algosdk.TransactionSigner\nimport TransactionWithSigner = algosdk.TransactionWithSigner\nimport isTransactionWithSigner = algosdk.isTransactionWithSigner\nimport encodeAddress = algosdk.encodeAddress\nimport SimulateResponse = algosdk.modelsv2.SimulateResponse\nimport modelsv2 = algosdk.modelsv2\n\nexport const MAX_TRANSACTION_GROUP_SIZE = 16\n\n/** Options to control a simulate request */\nexport type SimulateOptions = Expand<Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>>\n\n/** Common parameters for defining a transaction. */\nexport type CommonTransactionParams = {\n  /** The address of the account sending the transaction. */\n  sender: string\n  /** The function used to sign transaction(s); if not specified then\n   *  an attempt will be made to find a registered signer for the\n   *  given `sender` or use a default signer (if configured).\n   */\n  signer?: algosdk.TransactionSigner | TransactionSignerAccount\n  /** Change the signing key of the sender to the given address.\n   *\n   * **Warning:** Please be careful with this parameter and be sure to read the [official rekey guidance](https://developer.algorand.org/docs/get-details/accounts/rekey/).\n   */\n  rekeyTo?: string\n  /** Note to attach to the transaction. Max of 1000 bytes. */\n  note?: Uint8Array | string\n  /** Prevent multiple transactions with the same lease being included within the validity window.\n   *\n   * A [lease](https://developer.algorand.org/articles/leased-transactions-securing-advanced-smart-contract-design/)\n   *  enforces a mutually exclusive transaction (useful to prevent double-posting and other scenarios).\n   */\n  lease?: Uint8Array | string\n  /** The static transaction fee. In most cases you want to use `extraFee` unless setting the fee to 0 to be covered by another transaction. */\n  staticFee?: AlgoAmount\n  /** The fee to pay IN ADDITION to the suggested fee. Useful for covering inner transaction fees. */\n  extraFee?: AlgoAmount\n  /** Throw an error if the fee for the transaction is more than this amount; prevents overspending on fees during high congestion periods. */\n  maxFee?: AlgoAmount\n  /** How many rounds the transaction should be valid for, if not specified then the registered default validity window will be used. */\n  validityWindow?: number\n  /**\n   * Set the first round this transaction is valid.\n   * If left undefined, the value from algod will be used.\n   *\n   * We recommend you only set this when you intentionally want this to be some time in the future.\n   */\n  firstValidRound?: bigint\n  /** The last round this transaction is valid. It is recommended to use `validityWindow` instead. */\n  lastValidRound?: bigint\n}\n\n/** Parameters to define a payment transaction. */\nexport type PaymentParams = CommonTransactionParams & {\n  /** The address of the account that will receive the Algo */\n  receiver: string\n  /** Amount to send */\n  amount: AlgoAmount\n  /** If given, close the sender account and send the remaining balance to this address\n   *\n   * *Warning:* Be careful with this parameter as it can lead to loss of funds if not used correctly.\n   */\n  closeRemainderTo?: string\n}\n\n/** Parameters to define an asset create transaction.\n *\n * The account that sends this transaction will automatically be opted in to the asset and will hold all units after creation.\n */\nexport type AssetCreateParams = CommonTransactionParams & {\n  /** The total amount of the smallest divisible (decimal) unit to create.\n   *\n   * For example, if `decimals` is, say, 2, then for every 100 `total` there would be 1 whole unit.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  total: bigint\n\n  /** The amount of decimal places the asset should have.\n   *\n   * If unspecified then the asset will be in whole units (i.e. `0`).\n   *\n   * * If 0, the asset is not divisible;\n   * * If 1, the base unit of the asset is in tenths;\n   * * If 2, the base unit of the asset is in hundredths;\n   * * If 3, the base unit of the asset is in thousandths;\n   * * and so on up to 19 decimal places.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  decimals?: number\n\n  /** The optional name of the asset.\n   *\n   * Max size is 32 bytes.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  assetName?: string\n\n  /** The optional name of the unit of this asset (e.g. ticker name).\n   *\n   * Max size is 8 bytes.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  unitName?: string\n\n  /** Specifies an optional URL where more information about the asset can be retrieved (e.g. metadata).\n   *\n   * Max size is 96 bytes.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  url?: string\n\n  /** 32-byte hash of some metadata that is relevant to your asset and/or asset holders.\n   *\n   * The format of this metadata is up to the application.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  metadataHash?: string | Uint8Array\n\n  /** Whether the asset is frozen by default for all accounts.\n   * Defaults to `false`.\n   *\n   * If `true` then for anyone apart from the creator to hold the\n   * asset it needs to be unfrozen per account using an asset freeze\n   * transaction from the `freeze` account, which must be set on creation.\n   *\n   * This field can only be specified upon asset creation.\n   */\n  defaultFrozen?: boolean\n\n  /** The address of the optional account that can manage the configuration of the asset and destroy it.\n   *\n   * The configuration fields it can change are `manager`, `reserve`, `clawback`, and `freeze`.\n   *\n   * If not set (`undefined` or `\"\"`) at asset creation or subsequently set to empty by the `manager` the asset becomes permanently immutable.\n   */\n  manager?: string\n\n  /**\n   * The address of the optional account that holds the reserve (uncirculated supply) units of the asset.\n   *\n   * This address has no specific authority in the protocol itself and is informational only.\n   *\n   * Some standards like [ARC-19](https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0019.md)\n   * rely on this field to hold meaningful data.\n   *\n   * It can be used in the case where you want to signal to holders of your asset that the uncirculated units\n   * of the asset reside in an account that is different from the default creator account.\n   *\n   * If not set (`undefined` or `\"\"`) at asset creation or subsequently set to empty by the manager the field is permanently empty.\n   */\n  reserve?: string\n\n  /**\n   * The address of the optional account that can be used to freeze or unfreeze holdings of this asset for any account.\n   *\n   * If empty, freezing is not permitted.\n   *\n   * If not set (`undefined` or `\"\"`) at asset creation or subsequently set to empty by the manager the field is permanently empty.\n   */\n  freeze?: string\n\n  /**\n   * The address of the optional account that can clawback holdings of this asset from any account.\n   *\n   * **This field should be used with caution** as the clawback account has the ability to **unconditionally take assets from any account**.\n   *\n   * If empty, clawback is not permitted.\n   *\n   * If not set (`undefined` or `\"\"`) at asset creation or subsequently set to empty by the manager the field is permanently empty.\n   */\n  clawback?: string\n}\n\n/** Parameters to define an asset reconfiguration transaction.\n *\n * **Note:** The manager, reserve, freeze, and clawback addresses\n * are immutably empty if they are not set. If manager is not set then\n * all fields are immutable from that point forward.\n */\nexport type AssetConfigParams = CommonTransactionParams & {\n  /** ID of the asset to reconfigure */\n  assetId: bigint\n  /** The address of the optional account that can manage the configuration of the asset and destroy it.\n   *\n   * The configuration fields it can change are `manager`, `reserve`, `clawback`, and `freeze`.\n   *\n   * If not set (`undefined` or `\"\"`) the asset will become permanently immutable.\n   */\n  manager: string | undefined\n  /**\n   * The address of the optional account that holds the reserve (uncirculated supply) units of the asset.\n   *\n   * This address has no specific authority in the protocol itself and is informational only.\n   *\n   * Some standards like [ARC-19](https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0019.md)\n   * rely on this field to hold meaningful data.\n   *\n   * It can be used in the case where you want to signal to holders of your asset that the uncirculated units\n   * of the asset reside in an account that is different from the default creator account.\n   *\n   * If not set (`undefined` or `\"\"`) the field will become permanently empty.\n   */\n  reserve?: string\n  /**\n   * The address of the optional account that can be used to freeze or unfreeze holdings of this asset for any account.\n   *\n   * If empty, freezing is not permitted.\n   *\n   * If not set (`undefined` or `\"\"`) the field will become permanently empty.\n   */\n  freeze?: string\n  /**\n   * The address of the optional account that can clawback holdings of this asset from any account.\n   *\n   * **This field should be used with caution** as the clawback account has the ability to **unconditionally take assets from any account**.\n   *\n   * If empty, clawback is not permitted.\n   *\n   * If not set (`undefined` or `\"\"`) the field will become permanently empty.\n   */\n  clawback?: string\n}\n\n/** Parameters to define an asset freeze transaction. */\nexport type AssetFreezeParams = CommonTransactionParams & {\n  /** The ID of the asset to freeze/unfreeze */\n  assetId: bigint\n  /** The address of the account to freeze or unfreeze */\n  account: string\n  /** Whether the assets in the account should be frozen */\n  frozen: boolean\n}\n\n/** Parameters to define an asset destroy transaction.\n *\n * Created assets can be destroyed only by the asset manager account. All of the assets must be owned by the creator of the asset before the asset can be deleted.\n */\nexport type AssetDestroyParams = CommonTransactionParams & {\n  /** ID of the asset to destroy */\n  assetId: bigint\n}\n\n/** Parameters to define an asset transfer transaction. */\nexport type AssetTransferParams = CommonTransactionParams & {\n  /** ID of the asset to transfer. */\n  assetId: bigint\n  /** Amount of the asset to transfer (in smallest divisible (decimal) units). */\n  amount: bigint\n  /** The address of the account that will receive the asset unit(s). */\n  receiver: string\n  /** Optional address of an account to clawback the asset from.\n   *\n   * Requires the sender to be the clawback account.\n   *\n   * **Warning:** Be careful with this parameter as it can lead to unexpected loss of funds if not used correctly.\n   */\n  clawbackTarget?: string\n  /** Optional address of an account to close the asset position to.\n   *\n   * **Warning:** Be careful with this parameter as it can lead to loss of funds if not used correctly.\n   */\n  closeAssetTo?: string\n}\n\n/** Parameters to define an asset opt-in transaction. */\nexport type AssetOptInParams = CommonTransactionParams & {\n  /** ID of the asset that will be opted-in to. */\n  assetId: bigint\n}\n\n/** Parameters to define an asset opt-out transaction. */\nexport type AssetOptOutParams = CommonTransactionParams & {\n  /** ID of the asset that will be opted-out of. */\n  assetId: bigint\n  /**\n   * The address of the asset creator account to close the asset\n   *   position to (any remaining asset units will be sent to this account).\n   */\n  creator: string\n}\n\n/** Parameters to define an online key registration transaction. */\nexport type OnlineKeyRegistrationParams = CommonTransactionParams & {\n  /** The root participation public key */\n  voteKey: Uint8Array\n  /** The VRF public key */\n  selectionKey: Uint8Array\n  /** The first round that the participation key is valid. Not to be confused with the `firstValid` round of the keyreg transaction */\n  voteFirst: bigint\n  /** The last round that the participation key is valid. Not to be confused with the `lastValid` round of the keyreg transaction */\n  voteLast: bigint\n  /** This is the dilution for the 2-level participation key. It determines the interval (number of rounds) for generating new ephemeral keys */\n  voteKeyDilution: bigint\n  /** The 64 byte state proof public key commitment */\n  stateProofKey?: Uint8Array\n}\n\n// Not yet exposed because of bug in algosdk\n// export type OfflineKeyRegistrationParams = CommonTransactionParams & {\n//   /** Prevent this account from ever participating again. On network with rewards enabled, also disable rewards for this account */\n//   preventAddressFromEverParticipatingAgain?: boolean\n// }\n\n/** Common parameters for defining an application call transaction. */\nexport type CommonAppCallParams = CommonTransactionParams & {\n  /** ID of the application; 0 if the application is being created. */\n  appId: bigint\n  /** The [on-complete](https://developer.algorand.org/docs/get-details/dapps/avm/teal/specification/#oncomplete) action of the call; defaults to no-op. */\n  onComplete?: algosdk.OnApplicationComplete\n  /** Any [arguments to pass to the smart contract call](https://developer.algorand.org/docs/get-details/dapps/avm/teal/#argument-passing). */\n  args?: Uint8Array[]\n  /** Any account addresses to add to the [accounts array](https://developer.algorand.org/docs/get-details/dapps/smart-contracts/apps/#reference-arrays). */\n  accountReferences?: string[]\n  /** The ID of any apps to load to the [foreign apps array](https://developer.algorand.org/docs/get-details/dapps/smart-contracts/apps/#reference-arrays). */\n  appReferences?: bigint[]\n  /** The ID of any assets to load to the [foreign assets array](https://developer.algorand.org/docs/get-details/dapps/smart-contracts/apps/#reference-arrays). */\n  assetReferences?: bigint[]\n  /** Any boxes to load to the [boxes array](https://developer.algorand.org/docs/get-details/dapps/smart-contracts/apps/#reference-arrays).\n   *\n   * Either the name identifier (which will be set against app ID of `0` i.e.\n   *  the current app), or a box identifier with the name identifier and app ID.\n   */\n  boxReferences?: (BoxReference | BoxIdentifier)[]\n}\n\n/** Parameters to define an app create transaction */\nexport type AppCreateParams = Expand<\n  Omit<CommonAppCallParams, 'appId'> & {\n    onComplete?: Exclude<algosdk.OnApplicationComplete, algosdk.OnApplicationComplete.ClearStateOC>\n    /** The program to execute for all OnCompletes other than ClearState as raw teal that will be compiled (string) or compiled teal (encoded as a byte array (Uint8Array)). */\n    approvalProgram: string | Uint8Array\n    /** The program to execute for ClearState OnComplete as raw teal that will be compiled (string) or compiled teal (encoded as a byte array (Uint8Array)). */\n    clearStateProgram: string | Uint8Array\n    /** The state schema for the app. This is immutable once the app is created. */\n    schema?: {\n      /** The number of integers saved in global state. */\n      globalInts: number\n      /** The number of byte slices saved in global state. */\n      globalByteSlices: number\n      /** The number of integers saved in local state. */\n      localInts: number\n      /** The number of byte slices saved in local state. */\n      localByteSlices: number\n    }\n    /** Number of extra pages required for the programs.\n     * Defaults to the number needed for the programs in this call if not specified.\n     * This is immutable once the app is created. */\n    extraProgramPages?: number\n  }\n>\n\n/** Parameters to define an app update transaction */\nexport type AppUpdateParams = Expand<\n  CommonAppCallParams & {\n    onComplete?: algosdk.OnApplicationComplete.UpdateApplicationOC\n    /** The program to execute for all OnCompletes other than ClearState as raw teal (string) or compiled teal (base 64 encoded as a byte array (Uint8Array)) */\n    approvalProgram: string | Uint8Array\n    /** The program to execute for ClearState OnComplete as raw teal (string) or compiled teal (base 64 encoded as a byte array (Uint8Array)) */\n    clearStateProgram: string | Uint8Array\n  }\n>\n\n/** Parameters to define an application call transaction. */\nexport type AppCallParams = CommonAppCallParams & {\n  onComplete?: Exclude<algosdk.OnApplicationComplete, algosdk.OnApplicationComplete.UpdateApplicationOC>\n}\n\n/** Common parameters to define an ABI method call transaction. */\nexport type AppMethodCallParams = CommonAppCallParams & {\n  onComplete?: Exclude<\n    algosdk.OnApplicationComplete,\n    algosdk.OnApplicationComplete.UpdateApplicationOC | algosdk.OnApplicationComplete.ClearStateOC\n  >\n}\n\n/** Parameters to define an application delete call transaction. */\nexport type AppDeleteParams = CommonAppCallParams & {\n  onComplete?: algosdk.OnApplicationComplete.DeleteApplicationOC\n}\n\n/** Parameters to define an ABI method call create transaction. */\nexport type AppCreateMethodCall = AppMethodCall<AppCreateParams>\n/** Parameters to define an ABI method call update transaction. */\nexport type AppUpdateMethodCall = AppMethodCall<AppUpdateParams>\n/** Parameters to define an ABI method call delete transaction. */\nexport type AppDeleteMethodCall = AppMethodCall<AppDeleteParams>\n/** Parameters to define an ABI method call transaction. */\nexport type AppCallMethodCall = AppMethodCall<AppMethodCallParams>\n\n/** Types that can be used to define a transaction argument for an ABI call transaction. */\nexport type AppMethodCallTransactionArgument =\n  // The following should match the partial `args` types from `AppMethodCall<T>` below\n  | TransactionWithSigner\n  | Transaction\n  | Promise<Transaction>\n  | AppMethodCall<AppCreateParams>\n  | AppMethodCall<AppUpdateParams>\n  | AppMethodCall<AppMethodCallParams>\n\n/** Parameters to define an ABI method call. */\nexport type AppMethodCall<T> = Expand<Omit<T, 'args'>> & {\n  /** The ABI method to call */\n  method: algosdk.ABIMethod\n  /** Arguments to the ABI method, either:\n   * * An ABI value\n   * * A transaction with explicit signer\n   * * A transaction (where the signer will be automatically assigned)\n   * * An unawaited transaction (e.g. from algorand.createTransaction.{transactionType}())\n   * * Another method call (via method call params object)\n   */\n  args?: (\n    | algosdk.ABIValue\n    // The following should match the above `AppMethodCallTransactionArgument` type above\n    | TransactionWithSigner\n    | Transaction\n    | Promise<Transaction>\n    | AppMethodCall<AppCreateParams>\n    | AppMethodCall<AppUpdateParams>\n    | AppMethodCall<AppMethodCallParams>\n  )[]\n}\n\nexport type Txn =\n  | (PaymentParams & { type: 'pay' })\n  | (AssetCreateParams & { type: 'assetCreate' })\n  | (AssetConfigParams & { type: 'assetConfig' })\n  | (AssetFreezeParams & { type: 'assetFreeze' })\n  | (AssetDestroyParams & { type: 'assetDestroy' })\n  | (AssetTransferParams & { type: 'assetTransfer' })\n  | (AssetOptInParams & { type: 'assetOptIn' })\n  | (AssetOptOutParams & { type: 'assetOptOut' })\n  | ((AppCallParams | AppCreateParams | AppUpdateParams) & { type: 'appCall' })\n  | (OnlineKeyRegistrationParams & { type: 'keyReg' })\n  | (algosdk.TransactionWithSigner & { type: 'txnWithSigner' })\n  | { atc: algosdk.AtomicTransactionComposer; type: 'atc' }\n  | ((AppCallMethodCall | AppCreateMethodCall | AppUpdateMethodCall) & { type: 'methodCall' })\n\n/** Parameters to create an `AlgoKitComposer`. */\nexport type AlgoKitComposerParams = {\n  /** The algod client to use to get suggestedParams and send the transaction group */\n  algod: algosdk.Algodv2\n  /** The function used to get the TransactionSigner for a given address */\n  getSigner: (address: string) => algosdk.TransactionSigner\n  /** The method used to get SuggestedParams for transactions in the group */\n  getSuggestedParams?: () => Promise<algosdk.SuggestedParams>\n  /** How many rounds a transaction should be valid for by default; if not specified\n   * then will be 10 rounds (or 1000 rounds if issuing transactions to LocalNet).\n   */\n  defaultValidityWindow?: number\n  /** An existing `AppManager` to use to manage app compilation and cache compilation results.\n   *\n   * If not specified than an ephemeral one will be created.\n   */\n  appManager?: AppManager\n}\n\n/** Set of transactions built by `AlgoKitComposer`. */\nexport interface BuiltTransactions {\n  /** The built transactions */\n  transactions: algosdk.Transaction[]\n  /** Any `ABIMethod` objects associated with any of the transactions in a map keyed by transaction index. */\n  methodCalls: Map<number, algosdk.ABIMethod>\n  /** Any `TransactionSigner` objects associated with any of the transactions in a map keyed by transaction index. */\n  signers: Map<number, algosdk.TransactionSigner>\n}\n\n/** AlgoKit Composer helps you compose and execute transactions as a transaction group. */\nexport default class AlgoKitComposer {\n  /** Signer used to represent a lack of signer */\n  private static NULL_SIGNER: algosdk.TransactionSigner = algosdk.makeEmptyTransactionSigner()\n\n  /** The ATC used to compose the group */\n  private atc = new algosdk.AtomicTransactionComposer()\n\n  /** Map of txid to ABI method */\n  private txnMethodMap: Map<string, algosdk.ABIMethod> = new Map()\n\n  /** Transactions that have not yet been composed */\n  private txns: Txn[] = []\n\n  /** The algod client used by the composer. */\n  private algod: algosdk.Algodv2\n\n  /** An async function that will return suggested params for the transaction. */\n  private getSuggestedParams: () => Promise<algosdk.SuggestedParams>\n\n  /** A function that takes in an address and return a signer function for that address. */\n  private getSigner: (address: string) => algosdk.TransactionSigner\n\n  /** The default transaction validity window */\n  private defaultValidityWindow = 10\n\n  /** Whether the validity window was explicitly set on construction */\n  private defaultValidityWindowIsExplicit = false\n\n  private appManager: AppManager\n\n  /**\n   * Create an `AlgoKitComposer`.\n   * @param params The configuration for this composer\n   */\n  constructor(params: AlgoKitComposerParams) {\n    this.algod = params.algod\n    const defaultGetSuggestedParams = () => params.algod.getTransactionParams().do()\n    this.getSuggestedParams = params.getSuggestedParams ?? defaultGetSuggestedParams\n    this.getSigner = params.getSigner\n    this.defaultValidityWindow = params.defaultValidityWindow ?? this.defaultValidityWindow\n    this.defaultValidityWindowIsExplicit = params.defaultValidityWindow !== undefined\n    this.appManager = params.appManager ?? new AppManager(params.algod)\n  }\n\n  /**\n   * Add a pre-built transaction to the transaction group.\n   * @param transaction The pre-built transaction\n   * @param signer Optional signer override for the transaction\n   * @returns The composer so you can chain method calls\n   */\n  addTransaction(transaction: Transaction, signer?: TransactionSigner): AlgoKitComposer {\n    this.txns.push({\n      txn: transaction,\n      signer: signer ?? this.getSigner(algosdk.encodeAddress(transaction.from.publicKey)),\n      type: 'txnWithSigner',\n    })\n\n    return this\n  }\n\n  /**\n   * Add a payment transaction to the transaction group.\n   * @param params The payment transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addPayment(params: PaymentParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'pay' })\n\n    return this\n  }\n\n  /**\n   * Add an asset create transaction to the transaction group.\n   * @param params The asset create transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetCreate(params: AssetCreateParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetCreate' })\n\n    return this\n  }\n\n  /**\n   * Add an asset config transaction to the transaction group.\n   * @param params The asset config transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetConfig(params: AssetConfigParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetConfig' })\n\n    return this\n  }\n\n  /**\n   * Add an asset freeze transaction to the transaction group.\n   * @param params The asset freeze transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetFreeze(params: AssetFreezeParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetFreeze' })\n\n    return this\n  }\n\n  /**\n   * Add an asset destroy transaction to the transaction group.\n   * @param params The asset destroy transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetDestroy(params: AssetDestroyParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetDestroy' })\n\n    return this\n  }\n\n  /**\n   * Add an asset transfer transaction to the transaction group.\n   * @param params The asset transfer transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetTransfer(params: AssetTransferParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetTransfer' })\n\n    return this\n  }\n\n  /**\n   * Add an asset opt-in transaction to the transaction group.\n   * @param params The asset opt-in transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetOptIn(params: AssetOptInParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetOptIn' })\n\n    return this\n  }\n\n  /**\n   * Add an asset opt-out transaction to the transaction group.\n   * @param params The asset opt-out transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAssetOptOut(params: AssetOptOutParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'assetOptOut' })\n\n    return this\n  }\n\n  /**\n   * Add an application create transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The application create transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppCreate(params: AppCreateParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'appCall' })\n\n    return this\n  }\n\n  /**\n   * Add an application update transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The application update transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppUpdate(params: AppUpdateParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'appCall', onComplete: algosdk.OnApplicationComplete.UpdateApplicationOC })\n\n    return this\n  }\n\n  /**\n   * Add an application delete transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The application delete transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppDelete(params: AppDeleteParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'appCall', onComplete: algosdk.OnApplicationComplete.DeleteApplicationOC })\n\n    return this\n  }\n\n  /**\n   * Add an application call transaction to the transaction group.\n   *\n   * If you want to create or update an app use `addAppCreate` or `addAppUpdate`.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The application call transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppCall(params: AppCallParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'appCall' })\n\n    return this\n  }\n\n  /**\n   * Add an ABI method create application call transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The ABI create method application call transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppCreateMethodCall(params: AppCreateMethodCall) {\n    this.txns.push({ ...params, type: 'methodCall' })\n    return this\n  }\n\n  /**\n   * Add an ABI method update application call transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The ABI update method application call transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppUpdateMethodCall(params: AppUpdateMethodCall) {\n    this.txns.push({ ...params, type: 'methodCall', onComplete: algosdk.OnApplicationComplete.UpdateApplicationOC })\n    return this\n  }\n\n  /**\n   * Add an ABI method delete application call transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The ABI delete method application call transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppDeleteMethodCall(params: AppDeleteMethodCall) {\n    this.txns.push({ ...params, type: 'methodCall', onComplete: algosdk.OnApplicationComplete.DeleteApplicationOC })\n    return this\n  }\n\n  /**\n   * Add a non-create/non-update ABI method application call transaction to the transaction group.\n   *\n   * Note: we recommend using app clients to make it easier to make app calls.\n   * @param params The ABI method application call transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addAppCallMethodCall(params: AppCallMethodCall) {\n    this.txns.push({ ...params, type: 'methodCall' })\n    return this\n  }\n\n  /**\n   * Add an online key registration transaction to the transaction group.\n   * @param params The online key registration transaction parameters\n   * @returns The composer so you can chain method calls\n   */\n  addOnlineKeyRegistration(params: OnlineKeyRegistrationParams): AlgoKitComposer {\n    this.txns.push({ ...params, type: 'keyReg' })\n\n    return this\n  }\n\n  /**\n   * Add the transactions within an `AtomicTransactionComposer` to the transaction group.\n   * @param atc The `AtomicTransactionComposer` to build transactions from and add to the group\n   * @returns The composer so you can chain method calls\n   */\n  addAtc(atc: algosdk.AtomicTransactionComposer): AlgoKitComposer {\n    this.txns.push({ atc, type: 'atc' })\n    return this\n  }\n\n  /** Build an ATC and return transactions ready to be incorporated into a broader set of transactions this composer is composing */\n  private buildAtc(\n    atc: algosdk.AtomicTransactionComposer,\n    processTransaction?: (txn: algosdk.Transaction, index: number) => algosdk.Transaction,\n  ): algosdk.TransactionWithSigner[] {\n    const group = atc.buildGroup()\n\n    const txnWithSigners = group.map((ts, idx) => {\n      // Remove underlying group ID from the transaction since it will be re-grouped when this AlgoKitComposer is built\n      ts.txn.group = undefined\n      // Process transaction if a function is provided\n      ts.txn = processTransaction?.(ts.txn, idx) ?? ts.txn\n      // If this was a method call stash the ABIMethod for later\n      if (atc['methodCalls'].get(idx)) {\n        this.txnMethodMap.set(ts.txn.txID(), atc['methodCalls'].get(idx))\n      }\n      return ts\n    })\n\n    return txnWithSigners\n  }\n\n  private commonTxnBuildStep(params: CommonTransactionParams, txn: algosdk.Transaction, suggestedParams: algosdk.SuggestedParams) {\n    if (params.lease) txn.addLease(encodeLease(params.lease)!)\n    if (params.rekeyTo) txn.addRekey(params.rekeyTo)\n    const encoder = new TextEncoder()\n    if (params.note) txn.note = typeof params.note === 'string' ? encoder.encode(params.note) : params.note\n\n    if (params.firstValidRound) {\n      txn.firstRound = Number(params.firstValidRound)\n    }\n\n    if (params.lastValidRound) {\n      txn.lastRound = Number(params.lastValidRound)\n    } else {\n      // If the validity window isn't set in this transaction or by default and we are pointing at\n      //  LocalNet set a bigger window to avoid dead transactions\n      const window =\n        params.validityWindow ??\n        (!this.defaultValidityWindowIsExplicit && genesisIdIsLocalNet(suggestedParams.genesisID) ? 1000 : this.defaultValidityWindow)\n      txn.lastRound = txn.firstRound + window\n    }\n\n    if (params.staticFee !== undefined && params.extraFee !== undefined) {\n      throw Error('Cannot set both staticFee and extraFee')\n    }\n\n    if (params.staticFee !== undefined) {\n      txn.fee = Number(params.staticFee.microAlgo)\n    } else {\n      txn.fee = txn.estimateSize() * suggestedParams.fee || algosdk.ALGORAND_MIN_TX_FEE\n      if (params.extraFee) txn.fee += Number(params.extraFee.microAlgo)\n    }\n    txn.flatFee = true\n\n    if (params.maxFee !== undefined && txn.fee > params.maxFee.microAlgo) {\n      throw Error(`Transaction fee ${txn.fee} µALGO is greater than maxFee ${params.maxFee}`)\n    }\n\n    return txn\n  }\n\n  /**\n   * Builds an ABI method call transaction and any other associated transactions represented in the ABI args.\n   * @param includeSigner Whether to include the actual signer for the transactions.\n   *  If you are just building transactions without signers yet then set this to `false`.\n   */\n  private async buildMethodCall(\n    params: AppCallMethodCall | AppCreateMethodCall | AppUpdateMethodCall,\n    suggestedParams: algosdk.SuggestedParams,\n    includeSigner: boolean,\n  ): Promise<algosdk.TransactionWithSigner[]> {\n    const methodArgs: algosdk.ABIArgument[] = []\n    const isAbiValue = (x: unknown): x is algosdk.ABIValue => {\n      if (Array.isArray(x)) return x.length == 0 || x.every(isAbiValue)\n\n      return typeof x === 'bigint' || typeof x === 'boolean' || typeof x === 'number' || typeof x === 'string' || x instanceof Uint8Array\n    }\n\n    for (let i = 0; i < (params.args ?? []).length; i++) {\n      const arg = params.args![i]\n      if (arg === undefined) {\n        throw Error(`No value provided for argument ${i + 1} within call to ${params.method.name}`)\n      }\n\n      if (isAbiValue(arg)) {\n        methodArgs.push(arg)\n        continue\n      }\n\n      if (isTransactionWithSigner(arg)) {\n        methodArgs.push(arg)\n        continue\n      }\n\n      if ('method' in arg) {\n        const tempTxnWithSigners = await this.buildMethodCall(arg, suggestedParams, includeSigner)\n        methodArgs.push(...tempTxnWithSigners)\n        continue\n      }\n\n      const txn = await arg\n      methodArgs.push({\n        txn,\n        signer: includeSigner\n          ? params.signer\n            ? 'signer' in params.signer\n              ? params.signer.signer\n              : params.signer\n            : this.getSigner(encodeAddress(txn.from.publicKey))\n          : AlgoKitComposer.NULL_SIGNER,\n      })\n    }\n\n    const methodAtc = new algosdk.AtomicTransactionComposer()\n\n    const appId = Number('appId' in params ? params.appId : 0n)\n    const approvalProgram =\n      'approvalProgram' in params\n        ? typeof params.approvalProgram === 'string'\n          ? (await this.appManager.compileTeal(params.approvalProgram)).compiledBase64ToBytes\n          : params.approvalProgram\n        : undefined\n    const clearStateProgram =\n      'clearStateProgram' in params\n        ? typeof params.clearStateProgram === 'string'\n          ? (await this.appManager.compileTeal(params.clearStateProgram)).compiledBase64ToBytes\n          : params.clearStateProgram\n        : undefined\n\n    methodAtc.addMethodCall({\n      appID: appId,\n      sender: params.sender,\n      suggestedParams,\n      onComplete: params.onComplete ?? algosdk.OnApplicationComplete.NoOpOC,\n      appAccounts: params.accountReferences,\n      appForeignApps: params.appReferences?.map((x) => Number(x)),\n      appForeignAssets: params.assetReferences?.map((x) => Number(x)),\n      boxes: params.boxReferences?.map(AppManager.getBoxReference),\n      approvalProgram,\n      clearProgram: clearStateProgram,\n      extraPages:\n        appId === 0\n          ? 'extraProgramPages' in params && params.extraProgramPages !== undefined\n            ? params.extraProgramPages\n            : approvalProgram\n              ? Math.floor((approvalProgram.length + (clearStateProgram?.length ?? 0)) / APP_PAGE_MAX_SIZE)\n              : 0\n          : undefined,\n      numLocalInts: appId === 0 ? ('schema' in params ? params.schema?.localInts ?? 0 : 0) : undefined,\n      numLocalByteSlices: appId === 0 ? ('schema' in params ? params.schema?.localByteSlices ?? 0 : 0) : undefined,\n      numGlobalInts: appId === 0 ? ('schema' in params ? params.schema?.globalInts ?? 0 : 0) : undefined,\n      numGlobalByteSlices: appId === 0 ? ('schema' in params ? params.schema?.globalByteSlices ?? 0 : 0) : undefined,\n      method: params.method,\n      signer: includeSigner\n        ? params.signer\n          ? 'signer' in params.signer\n            ? params.signer.signer\n            : params.signer\n          : this.getSigner(params.sender)\n        : AlgoKitComposer.NULL_SIGNER,\n      methodArgs: methodArgs,\n      // note, lease, and rekeyTo are set in the common build step\n      note: undefined,\n      lease: undefined,\n      rekeyTo: undefined,\n    })\n\n    // Process the ATC to get a set of transactions ready for broader grouping\n    //  and with the common build step to set fees and validity rounds\n    return this.buildAtc(methodAtc, (txn, idx) =>\n      idx === methodAtc.count() - 1 ? this.commonTxnBuildStep(params, txn, suggestedParams) : txn,\n    )\n  }\n\n  private buildPayment(params: PaymentParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n      from: params.sender,\n      to: params.receiver,\n      amount: params.amount.microAlgo,\n      closeRemainderTo: params.closeRemainderTo,\n      suggestedParams,\n    })\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private buildAssetCreate(params: AssetCreateParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n      from: params.sender,\n      total: params.total,\n      decimals: params.decimals ?? 0,\n      assetName: params.assetName,\n      unitName: params.unitName,\n      assetURL: params.url,\n      defaultFrozen: params.defaultFrozen ?? false,\n      assetMetadataHash: params.metadataHash,\n      manager: params.manager,\n      reserve: params.reserve,\n      freeze: params.freeze,\n      clawback: params.clawback,\n      suggestedParams,\n    })\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private buildAssetConfig(params: AssetConfigParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makeAssetConfigTxnWithSuggestedParamsFromObject({\n      from: params.sender,\n      assetIndex: Number(params.assetId),\n      suggestedParams,\n      manager: params.manager,\n      reserve: params.reserve,\n      freeze: params.freeze,\n      clawback: params.clawback,\n      strictEmptyAddressChecking: false,\n    })\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private buildAssetDestroy(params: AssetDestroyParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makeAssetDestroyTxnWithSuggestedParamsFromObject({\n      from: params.sender,\n      assetIndex: Number(params.assetId),\n      suggestedParams,\n    })\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private buildAssetFreeze(params: AssetFreezeParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makeAssetFreezeTxnWithSuggestedParamsFromObject({\n      from: params.sender,\n      assetIndex: Number(params.assetId),\n      freezeTarget: params.account,\n      freezeState: params.frozen,\n      suggestedParams,\n    })\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private buildAssetTransfer(params: AssetTransferParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n      from: params.sender,\n      to: params.receiver,\n      assetIndex: Number(params.assetId),\n      amount: params.amount,\n      suggestedParams,\n      closeRemainderTo: params.closeAssetTo,\n      revocationTarget: params.clawbackTarget,\n    })\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private async buildAppCall(params: AppCallParams | AppUpdateParams | AppCreateParams, suggestedParams: algosdk.SuggestedParams) {\n    const appId = Number('appId' in params ? params.appId : 0n)\n    const approvalProgram =\n      'approvalProgram' in params\n        ? typeof params.approvalProgram === 'string'\n          ? (await this.appManager.compileTeal(params.approvalProgram)).compiledBase64ToBytes\n          : params.approvalProgram\n        : undefined\n    const clearStateProgram =\n      'clearStateProgram' in params\n        ? typeof params.clearStateProgram === 'string'\n          ? (await this.appManager.compileTeal(params.clearStateProgram)).compiledBase64ToBytes\n          : params.clearStateProgram\n        : undefined\n\n    const sdkParams = {\n      from: params.sender,\n      suggestedParams,\n      appArgs: params.args,\n      onComplete: params.onComplete ?? algosdk.OnApplicationComplete.NoOpOC,\n      accounts: params.accountReferences,\n      foreignApps: params.appReferences?.map((x) => Number(x)),\n      foreignAssets: params.assetReferences?.map((x) => Number(x)),\n      boxes: params.boxReferences?.map(AppManager.getBoxReference),\n      approvalProgram,\n      clearProgram: clearStateProgram,\n    }\n\n    let txn: algosdk.Transaction\n\n    if (appId === 0) {\n      if (sdkParams.approvalProgram === undefined || sdkParams.clearProgram === undefined) {\n        throw new Error('approvalProgram and clearStateProgram are required for application creation')\n      }\n\n      txn = algosdk.makeApplicationCreateTxnFromObject({\n        ...sdkParams,\n        extraPages:\n          'extraProgramPages' in params\n            ? params.extraProgramPages ?? Math.floor((approvalProgram!.length + clearStateProgram!.length) / APP_PAGE_MAX_SIZE)\n            : 0,\n        numLocalInts: 'schema' in params ? params.schema?.localInts ?? 0 : 0,\n        numLocalByteSlices: 'schema' in params ? params.schema?.localByteSlices ?? 0 : 0,\n        numGlobalInts: 'schema' in params ? params.schema?.globalInts ?? 0 : 0,\n        numGlobalByteSlices: 'schema' in params ? params.schema?.globalByteSlices ?? 0 : 0,\n        approvalProgram: approvalProgram!,\n        clearProgram: clearStateProgram!,\n      })\n    } else {\n      txn = algosdk.makeApplicationCallTxnFromObject({ ...sdkParams, appIndex: appId })\n    }\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  private buildKeyReg(params: OnlineKeyRegistrationParams, suggestedParams: algosdk.SuggestedParams) {\n    const txn = algosdk.makeKeyRegistrationTxnWithSuggestedParams(\n      params.sender,\n      undefined,\n      params.voteKey,\n      params.selectionKey,\n      Number(params.voteFirst),\n      Number(params.voteLast),\n      Number(params.voteKeyDilution),\n      suggestedParams,\n      undefined,\n      false,\n      params.stateProofKey,\n    )\n\n    return this.commonTxnBuildStep(params, txn, suggestedParams)\n  }\n\n  /** Builds all transaction types apart from `txnWithSigner`, `atc` and `methodCall` since those ones can have custom signers that need to be retrieved. */\n  private async buildTxn(txn: Txn, suggestedParams: algosdk.SuggestedParams): Promise<algosdk.Transaction[]> {\n    switch (txn.type) {\n      case 'pay':\n        return [this.buildPayment(txn, suggestedParams)]\n      case 'assetCreate':\n        return [this.buildAssetCreate(txn, suggestedParams)]\n      case 'appCall':\n        return [await this.buildAppCall(txn, suggestedParams)]\n      case 'assetConfig':\n        return [this.buildAssetConfig(txn, suggestedParams)]\n      case 'assetDestroy':\n        return [this.buildAssetDestroy(txn, suggestedParams)]\n      case 'assetFreeze':\n        return [this.buildAssetFreeze(txn, suggestedParams)]\n      case 'assetTransfer':\n        return [this.buildAssetTransfer(txn, suggestedParams)]\n      case 'assetOptIn':\n        return [this.buildAssetTransfer({ ...txn, receiver: txn.sender, amount: 0n }, suggestedParams)]\n      case 'assetOptOut':\n        return [this.buildAssetTransfer({ ...txn, receiver: txn.sender, amount: 0n, closeAssetTo: txn.creator }, suggestedParams)]\n      case 'keyReg':\n        return [this.buildKeyReg(txn, suggestedParams)]\n      default:\n        throw Error(`Unsupported txn type`)\n    }\n  }\n\n  private async buildTxnWithSigner(txn: Txn, suggestedParams: algosdk.SuggestedParams): Promise<algosdk.TransactionWithSigner[]> {\n    if (txn.type === 'txnWithSigner') {\n      return [txn]\n    }\n\n    if (txn.type === 'atc') {\n      return this.buildAtc(txn.atc)\n    }\n\n    if (txn.type === 'methodCall') {\n      return await this.buildMethodCall(txn, suggestedParams, true)\n    }\n\n    const signer = txn.signer ? ('signer' in txn.signer ? txn.signer.signer : txn.signer) : this.getSigner(txn.sender)\n\n    return (await this.buildTxn(txn, suggestedParams)).map((txn) => ({ txn, signer }))\n  }\n\n  /**\n   * Compose all of the transactions without signers and return the transaction objects directly along with any ABI method calls.\n   *\n   * @returns The array of built transactions and any corresponding method calls\n   */\n  async buildTransactions(): Promise<BuiltTransactions> {\n    const suggestedParams = await this.getSuggestedParams()\n\n    const transactions: algosdk.Transaction[] = []\n    const methodCalls = new Map<number, algosdk.ABIMethod>()\n    const signers = new Map<number, algosdk.TransactionSigner>()\n\n    for (const txn of this.txns) {\n      if (!['txnWithSigner', 'atc', 'methodCall'].includes(txn.type)) {\n        transactions.push(...(await this.buildTxn(txn, suggestedParams)))\n      } else {\n        const transactionsWithSigner =\n          txn.type === 'txnWithSigner'\n            ? [txn]\n            : txn.type === 'atc'\n              ? this.buildAtc(txn.atc)\n              : txn.type === 'methodCall'\n                ? await this.buildMethodCall(txn, suggestedParams, false)\n                : []\n\n        transactions.push(...transactionsWithSigner.map((ts) => ts.txn))\n        transactionsWithSigner.forEach((ts, idx) => {\n          if (ts.signer && ts.signer !== AlgoKitComposer.NULL_SIGNER) {\n            signers.set(idx, ts.signer)\n          }\n        })\n      }\n    }\n\n    for (let i = 0; i < transactions.length; i++) {\n      const method = this.txnMethodMap.get(transactions[i].txID())\n      if (method) methodCalls.set(i, method)\n    }\n\n    return { transactions, methodCalls, signers }\n  }\n\n  /**\n   * Get the number of transactions currently added to this composer.\n   */\n  async count() {\n    return (await this.buildTransactions()).transactions.length\n  }\n\n  /**\n   * Compose all of the transactions in a single atomic transaction group and an atomic transaction composer.\n   *\n   * You can then use the transactions standalone, or use the composer to execute or simulate the transactions.\n   *\n   * Once this method is called, no further transactions will be able to be added.\n   * You can safely call this method multiple times to get the same result.\n   * @returns The built atomic transaction composer and the transactions\n   */\n  async build() {\n    if (this.atc.getStatus() === algosdk.AtomicTransactionComposerStatus.BUILDING) {\n      const suggestedParams = await this.getSuggestedParams()\n\n      // Build all of the transactions\n      const txnWithSigners: algosdk.TransactionWithSigner[] = []\n      for (const txn of this.txns) {\n        txnWithSigners.push(...(await this.buildTxnWithSigner(txn, suggestedParams)))\n      }\n\n      // Add all of the transactions to the underlying ATC\n      const methodCalls = new Map<number, algosdk.ABIMethod>()\n      txnWithSigners.forEach((ts, idx) => {\n        this.atc.addTransaction(ts)\n        // Populate consolidated set of all ABI method calls\n        const method = this.txnMethodMap.get(ts.txn.txID())\n        if (method) methodCalls.set(idx, method)\n      })\n      this.atc['methodCalls'] = methodCalls\n    }\n\n    return { atc: this.atc, transactions: this.atc.buildGroup(), methodCalls: this.atc['methodCalls'] }\n  }\n\n  /**\n   * Rebuild the group, discarding any previously built transactions.\n   * This will potentially cause new signers and suggested params to be used if the callbacks return a new value compared to the first build.\n   * @returns The newly built atomic transaction composer and the transactions\n   */\n  async rebuild() {\n    this.atc = new algosdk.AtomicTransactionComposer()\n    return await this.build()\n  }\n\n  /**\n   * Compose the atomic transaction group and send it to the network.\n   * @param params The parameters to control execution with\n   * @returns The execution result\n   */\n  async send(params?: SendParams): Promise<SendAtomicTransactionComposerResults> {\n    const group = (await this.build()).transactions\n\n    let waitRounds = params?.maxRoundsToWaitForConfirmation\n    if (waitRounds === undefined) {\n      const lastRound = group.reduce((max, txn) => Math.max(txn.txn.lastRound, max), 0)\n      const { firstRound } = await this.getSuggestedParams()\n      waitRounds = lastRound - firstRound + 1\n    }\n\n    return await sendAtomicTransactionComposer(\n      {\n        atc: this.atc,\n        suppressLog: params?.suppressLog,\n        maxRoundsToWaitForConfirmation: waitRounds,\n        populateAppCallResources: params?.populateAppCallResources,\n      },\n      this.algod,\n    )\n  }\n\n  /**\n   * @deprecated Use `send` instead.\n   *\n   * Compose the atomic transaction group and send it to the network\n   *\n   * An alias for `composer.send(params)`.\n   * @param params The parameters to control execution with\n   * @returns The execution result\n   */\n  async execute(params?: SendParams): Promise<SendAtomicTransactionComposerResults> {\n    return this.send(params)\n  }\n\n  /**\n   * Compose the atomic transaction group and simulate sending it to the network\n   * @returns The simulation result\n   */\n  async simulate(options?: SimulateOptions): Promise<SendAtomicTransactionComposerResults & { simulateResponse: SimulateResponse }> {\n    await this.build()\n\n    if (Config.debug && !Config.traceAll) {\n      // Dump the traces to a file for use with AlgoKit AVM debugger\n      // Checks for false on traceAll because it should have been already\n      // executed above\n      const simulateResponse = await performAtomicTransactionComposerSimulate(this.atc, this.algod)\n      await Config.events.emitAsync(EventType.TxnGroupSimulated, {\n        simulateResponse,\n      })\n    }\n\n    const { methodResults, simulateResponse } = await this.atc.simulate(\n      this.algod,\n      new modelsv2.SimulateRequest({ txnGroups: [], ...options }),\n    )\n\n    if (simulateResponse && simulateResponse.txnGroups[0].failedAt) {\n      const error = new Error(\n        `Transaction failed at transaction(s) ${simulateResponse.txnGroups[0].failedAt.join(', ')} in the group. ${simulateResponse.txnGroups.find((x) => x.failureMessage)?.failureMessage}`,\n      )\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ;(error as any).simulateResponse = simulateResponse\n      throw error\n    }\n\n    const transactions = this.atc.buildGroup().map((t) => t.txn)\n    return {\n      confirmations: simulateResponse.txnGroups[0].txnResults.map((t) => t.txnResult),\n      transactions: transactions,\n      txIds: transactions.map((t) => t.txID()),\n      groupId: Buffer.from(transactions[0].group ?? new Uint8Array()).toString('base64'),\n      simulateResponse,\n      returns: methodResults.map((m) => m as ABIReturn),\n    }\n  }\n\n  /**\n   * Create an encoded transaction note that follows the ARC-2 spec.\n   *\n   * https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\n   * @param note The ARC-2 transaction note data\n   * @returns The binary encoded transaction note\n   */\n  static arc2Note(note: Arc2TransactionNote): Uint8Array {\n    const arc2Payload = `${note.dAppName}:${note.format}${typeof note.data === 'string' ? note.data : JSON.stringify(note.data)}`\n    const encoder = new TextEncoder()\n    return encoder.encode(arc2Payload)\n  }\n}\n"],"names":[],"mappings":"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"}