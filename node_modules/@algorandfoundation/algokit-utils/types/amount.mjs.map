{"version":3,"file":"amount.mjs","sources":["../../src/types/amount.ts"],"sourcesContent":["import algosdk from 'algosdk'\n\n/** Wrapper class to ensure safe, explicit conversion between µAlgo, Algo and numbers */\nexport class AlgoAmount {\n  private amountInMicroAlgo: bigint\n\n  /** Return the amount as a number in µAlgo */\n  get microAlgos() {\n    return this.amountInMicroAlgo\n  }\n\n  /** Return the amount as a number in µAlgo */\n  get microAlgo() {\n    return this.amountInMicroAlgo\n  }\n\n  /** Return the amount as a number in Algo */\n  get algos() {\n    return algosdk.microalgosToAlgos(Number(this.amountInMicroAlgo))\n  }\n\n  /** Return the amount as a number in Algo */\n  get algo() {\n    return algosdk.microalgosToAlgos(Number(this.amountInMicroAlgo))\n  }\n\n  constructor(\n    amount: { algos: number | bigint } | { algo: number | bigint } | { microAlgos: number | bigint } | { microAlgo: number | bigint },\n  ) {\n    this.amountInMicroAlgo =\n      'microAlgos' in amount\n        ? BigInt(amount.microAlgos)\n        : 'microAlgo' in amount\n          ? BigInt(amount.microAlgo)\n          : 'algos' in amount\n            ? BigInt(algosdk.algosToMicroalgos(Number(amount.algos)))\n            : BigInt(algosdk.algosToMicroalgos(Number(amount.algo)))\n  }\n\n  toString(): string {\n    return `${this.microAlgo.toLocaleString('en-US')} µALGO`\n  }\n\n  /** valueOf allows you to use `AlgoAmount` in comparison operations such as `<` and `>=` etc.,\n   * but it's not recommended to use this to convert to a number, it's much safer to explicitly call\n   * the algos or microAlgos properties\n   */\n  valueOf(): number {\n    return Number(this.microAlgo)\n  }\n\n  /** Create a `AlgoAmount` object representing the given number of Algo */\n  static Algos(amount: number | bigint) {\n    return new AlgoAmount({ algos: amount })\n  }\n\n  /** Create a `AlgoAmount` object representing the given number of Algo */\n  static Algo(amount: number | bigint) {\n    return new AlgoAmount({ algos: amount })\n  }\n\n  /** Create a `AlgoAmount` object representing the given number of µAlgo */\n  static MicroAlgos(amount: number | bigint) {\n    return new AlgoAmount({ microAlgos: amount })\n  }\n\n  /** Create a `AlgoAmount` object representing the given number of µAlgo */\n  static MicroAlgo(amount: number | bigint) {\n    return new AlgoAmount({ microAlgos: amount })\n  }\n}\n"],"names":[],"mappings":";;AAEA;MACa,UAAU,CAAA;;AAIrB,IAAA,IAAI,UAAU,GAAA;QACZ,OAAO,IAAI,CAAC,iBAAiB,CAAA;KAC9B;;AAGD,IAAA,IAAI,SAAS,GAAA;QACX,OAAO,IAAI,CAAC,iBAAiB,CAAA;KAC9B;;AAGD,IAAA,IAAI,KAAK,GAAA;QACP,OAAO,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAA;KACjE;;AAGD,IAAA,IAAI,IAAI,GAAA;QACN,OAAO,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAA;KACjE;AAED,IAAA,WAAA,CACE,MAAiI,EAAA;AAEjI,QAAA,IAAI,CAAC,iBAAiB;AACpB,YAAA,YAAY,IAAI,MAAM;AACpB,kBAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;kBACzB,WAAW,IAAI,MAAM;AACrB,sBAAE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;sBACxB,OAAO,IAAI,MAAM;AACjB,0BAAE,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACzD,0BAAE,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;KACjE;IAED,QAAQ,GAAA;QACN,OAAO,CAAA,EAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,MAAA,CAAQ,CAAA;KACzD;AAED;;;AAGG;IACH,OAAO,GAAA;AACL,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;KAC9B;;IAGD,OAAO,KAAK,CAAC,MAAuB,EAAA;QAClC,OAAO,IAAI,UAAU,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAA;KACzC;;IAGD,OAAO,IAAI,CAAC,MAAuB,EAAA;QACjC,OAAO,IAAI,UAAU,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAA;KACzC;;IAGD,OAAO,UAAU,CAAC,MAAuB,EAAA;QACvC,OAAO,IAAI,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAA;KAC9C;;IAGD,OAAO,SAAS,CAAC,MAAuB,EAAA;QACtC,OAAO,IAAI,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAA;KAC9C;AACF;;;;"}