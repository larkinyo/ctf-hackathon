{"version":3,"file":"app-manager.mjs","sources":["../../src/types/app-manager.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport { TransactionSignerAccount } from './account'\nimport {\n  BoxName,\n  DELETABLE_TEMPLATE_NAME,\n  UPDATABLE_TEMPLATE_NAME,\n  type ABIReturn,\n  type AppState,\n  type CompiledTeal,\n  type TealTemplateParams,\n} from './app'\nimport modelsv2 = algosdk.modelsv2\n\n/** Information about an app. */\nexport interface AppInformation {\n  /** The ID of the app. */\n  appId: bigint\n  /** The escrow address that the app operates with. */\n  appAddress: string\n  /**\n   * Approval program.\n   */\n  approvalProgram: Uint8Array\n  /**\n   * Clear state program.\n   */\n  clearStateProgram: Uint8Array\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  creator: string\n  /**\n   * Current global state values.\n   */\n  globalState: AppState\n  /** The number of allocated ints in per-user local state. */\n  localInts: number\n  /** The number of allocated byte slices in per-user local state. */\n  localByteSlices: number\n  /** The number of allocated ints in global state. */\n  globalInts: number\n  /** The number of allocated byte slices in global state. */\n  globalByteSlices: number\n  /** Any extra pages that are needed for the smart contract. */\n  extraProgramPages?: number\n}\n\n/**\n * Something that identifies an app box name - either a:\n *  * `Uint8Array` (the actual binary of the box name)\n *  * `string` (that will be encoded to a `Uint8Array`)\n *  * `TransactionSignerAccount` (that will be encoded into the\n *    public key address of the corresponding account)\n */\nexport type BoxIdentifier = string | Uint8Array | TransactionSignerAccount\n\n/**\n * A grouping of the app ID and name identifier to reference an app box.\n */\nexport interface BoxReference {\n  /**\n   * A unique application id\n   */\n  appId: bigint\n  /**\n   * Identifier for a box name\n   */\n  name: BoxIdentifier\n}\n\n/**\n * Parameters to get and decode a box value as an ABI type.\n */\nexport interface BoxValueRequestParams {\n  /** The ID of the app return box names for */\n  appId: bigint\n  /** The name of the box to return either as a string, binary array or `BoxName` */\n  boxName: BoxIdentifier\n  /** The ABI type to decode the value using */\n  type: algosdk.ABIType\n}\n\n/**\n * Parameters to get and decode a box value as an ABI type.\n */\nexport interface BoxValuesRequestParams {\n  /** The ID of the app return box names for */\n  appId: bigint\n  /** The names of the boxes to return either as a string, binary array or BoxName` */\n  boxNames: BoxIdentifier[]\n  /** The ABI type to decode the value using */\n  type: algosdk.ABIType\n}\n\n/** Allows management of application information. */\nexport class AppManager {\n  private _algod: algosdk.Algodv2\n  private _compilationResults: Record<string, CompiledTeal> = {}\n\n  /**\n   * Creates an `AppManager`\n   * @param algod An algod instance\n   */\n  constructor(algod: algosdk.Algodv2) {\n    this._algod = algod\n  }\n\n  /**\n   * Compiles the given TEAL using algod and returns the result, including source map.\n   *\n   * The result of this compilation is also cached keyed by the TEAL\n   *  code so it can be retrieved via `getCompilationResult`.\n   *\n   * This function is re-entrant; it will only compile the same code once.\n   *\n   * @param tealCode The TEAL code\n   * @returns The information about the compiled file\n   */\n  async compileTeal(tealCode: string): Promise<CompiledTeal> {\n    if (this._compilationResults[tealCode]) {\n      return this._compilationResults[tealCode]\n    }\n\n    const compiled = await this._algod.compile(tealCode).sourcemap(true).do()\n    const result = {\n      teal: tealCode,\n      compiled: compiled.result,\n      compiledHash: compiled.hash,\n      compiledBase64ToBytes: new Uint8Array(Buffer.from(compiled.result, 'base64')),\n      sourceMap: new algosdk.SourceMap(compiled['sourcemap']),\n    }\n    this._compilationResults[tealCode] = result\n\n    return result\n  }\n\n  /**\n   * Performs template substitution of a teal template and compiles it, returning the compiled result.\n   *\n   * Looks for `TMPL_{parameter}` for template replacements and replaces AlgoKit deploy-time control parameters\n   * if deployment metadata is specified.\n   *\n   * * `TMPL_UPDATABLE` for updatability / immutability control\n   * * `TMPL_DELETABLE` for deletability / permanence control\n   *\n   * @param tealTemplateCode The TEAL logic to compile\n   * @param templateParams Any parameters to replace in the .teal file before compiling\n   * @param deploymentMetadata The deployment metadata the app will be deployed with\n   * @returns The information about the compiled code\n   */\n  async compileTealTemplate(\n    tealTemplateCode: string,\n    templateParams?: TealTemplateParams,\n    deploymentMetadata?: { updatable?: boolean; deletable?: boolean },\n  ): Promise<CompiledTeal> {\n    let tealCode = AppManager.stripTealComments(tealTemplateCode)\n\n    tealCode = AppManager.replaceTealTemplateParams(tealCode, templateParams)\n\n    if (deploymentMetadata) {\n      tealCode = AppManager.replaceTealTemplateDeployTimeControlParams(tealCode, deploymentMetadata)\n    }\n\n    return await this.compileTeal(tealCode)\n  }\n\n  /**\n   * Returns a previous compilation result.\n   * @param tealCode The TEAL code\n   * @returns The information about the previously compiled file\n   *  or `undefined` if that TEAL code wasn't previously compiled\n   */\n  getCompilationResult(tealCode: string): CompiledTeal | undefined {\n    return this._compilationResults[tealCode]\n  }\n\n  /**\n   * Returns the current app information for the app with the given ID.\n   *\n   * @example\n   * ```typescript\n   * const appInfo = await appManager.getById(12353n);\n   * ```\n   *\n   * @param appId The ID of the app\n   * @returns The app information\n   */\n  public async getById(appId: bigint): Promise<AppInformation> {\n    const app = modelsv2.Application.from_obj_for_encoding(await this._algod.getApplicationByID(Number(appId)).do())\n    return {\n      appId: BigInt(app.id),\n      appAddress: algosdk.getApplicationAddress(app.id),\n      approvalProgram: app.params.approvalProgram,\n      clearStateProgram: app.params.clearStateProgram,\n      creator: app.params.creator,\n      localInts: Number(app.params.localStateSchema?.numUint ?? 0),\n      localByteSlices: Number(app.params.localStateSchema?.numByteSlice ?? 0),\n      globalInts: Number(app.params.globalStateSchema?.numUint ?? 0),\n      globalByteSlices: Number(app.params.globalStateSchema?.numByteSlice ?? 0),\n      extraProgramPages: Number(app.params.extraProgramPages ?? 0),\n      globalState: AppManager.decodeAppState(app.params.globalState ?? []),\n    }\n  }\n\n  /**\n   * Returns the current global state values for the given app ID and account address\n   *\n   * @param appId The ID of the app to return global state for\n   * @returns The current global state for the given app\n   */\n  public async getGlobalState(appId: bigint) {\n    return (await this.getById(appId)).globalState\n  }\n\n  /**\n   * Returns the current local state values for the given app ID and account address\n   *\n   * @param appId The ID of the app to return local state for\n   * @param address The string address of the account to get local state for the given app\n   * @returns The current local state for the given (app, account) combination\n   */\n  public async getLocalState(appId: bigint, address: string) {\n    const appInfo = modelsv2.AccountApplicationResponse.from_obj_for_encoding(\n      await this._algod.accountApplicationInformation(address, Number(appId)).do(),\n    )\n\n    if (!appInfo.appLocalState?.keyValue) {\n      throw new Error(\"Couldn't find local state\")\n    }\n\n    return AppManager.decodeAppState(appInfo.appLocalState.keyValue)\n  }\n\n  /**\n   * Returns the names of the current boxes for the given app.\n   * @param appId The ID of the app return box names for\n   * @returns The current box names\n   */\n  public async getBoxNames(appId: bigint): Promise<BoxName[]> {\n    const boxResult = await this._algod.getApplicationBoxes(Number(appId)).do()\n    return boxResult.boxes.map((b) => {\n      return {\n        nameRaw: b.name,\n        nameBase64: Buffer.from(b.name).toString('base64'),\n        name: Buffer.from(b.name).toString('utf-8'),\n      }\n    })\n  }\n\n  /**\n   * Returns the value of the given box name for the given app.\n   * @param appId The ID of the app return box names for\n   * @param boxName The name of the box to return either as a string, binary array or `BoxName`\n   * @returns The current box value as a byte array\n   */\n  public async getBoxValue(appId: bigint, boxName: BoxIdentifier): Promise<Uint8Array> {\n    const name = AppManager.getBoxReference(boxName).name\n    const boxResult = await this._algod.getApplicationBoxByName(Number(appId), name).do()\n    return boxResult.value\n  }\n\n  /**\n   * Returns the value of the given box names for the given app.\n   * @param appId The ID of the app return box names for\n   * @param boxNames The names of the boxes to return either as a string, binary array or `BoxName`\n   * @returns The current box values as a byte array in the same order as the passed in box names\n   */\n  public async getBoxValues(appId: bigint, boxNames: BoxIdentifier[]): Promise<Uint8Array[]> {\n    return await Promise.all(boxNames.map(async (boxName) => await this.getBoxValue(appId, boxName)))\n  }\n\n  /**\n   * Returns the value of the given box name for the given app decoded based on the given ABI type.\n   * @param request The parameters for the box value request\n   * @returns The current box value as an ABI value\n   */\n  public async getBoxValueFromABIType(request: BoxValueRequestParams): Promise<algosdk.ABIValue> {\n    const { appId, boxName, type } = request\n    const value = await this.getBoxValue(appId, boxName)\n    return type.decode(value)\n  }\n\n  /**\n   * Returns the value of the given box names for the given app decoded based on the given ABI type.\n   * @param request The parameters for the box value request\n   * @returns The current box values as an ABI value in the same order as the passed in box names\n   */\n  public async getBoxValuesFromABIType(request: BoxValuesRequestParams): Promise<algosdk.ABIValue[]> {\n    const { appId, boxNames, type } = request\n    return await Promise.all(boxNames.map(async (boxName) => await this.getBoxValueFromABIType({ appId, boxName, type })))\n  }\n\n  /**\n   * Returns a `algosdk.BoxReference` given a `BoxIdentifier` or `BoxReference`.\n   * @param boxId The box to return a reference for\n   * @returns The box reference ready to pass into a `algosdk.Transaction`\n   */\n  public static getBoxReference(boxId: BoxIdentifier | BoxReference): algosdk.BoxReference {\n    const ref = typeof boxId === 'object' && 'appId' in boxId ? boxId : { appId: 0n, name: boxId }\n    return {\n      appIndex: Number(ref.appId),\n      name:\n        typeof ref.name === 'string'\n          ? new TextEncoder().encode(ref.name)\n          : 'length' in ref.name\n            ? ref.name\n            : algosdk.decodeAddress(ref.name.addr).publicKey,\n    } as algosdk.BoxReference\n  }\n\n  /**\n   * Converts an array of global/local state values from the algod api to a more friendly\n   * generic object keyed by the UTF-8 value of the key.\n   * @param state A `global-state`, `local-state`, `global-state-deltas` or `local-state-deltas`\n   * @returns An object keyeed by the UTF-8 representation of the key with various parsings of the values\n   */\n  public static decodeAppState(state: { key: string; value: modelsv2.TealValue | modelsv2.EvalDelta }[]): AppState {\n    const stateValues = {} as AppState\n\n    // Start with empty set\n    for (const stateVal of state) {\n      const keyBase64 = stateVal.key\n      const keyRaw = Buffer.from(keyBase64, 'base64')\n      const key = keyRaw.toString('utf-8')\n      const tealValue = stateVal.value\n\n      const dataTypeFlag = 'action' in tealValue ? tealValue.action : tealValue.type\n      let valueBase64: string\n      let valueRaw: Buffer\n      switch (dataTypeFlag) {\n        case 1:\n          valueBase64 = tealValue.bytes ?? ''\n          valueRaw = Buffer.from(valueBase64, 'base64')\n          stateValues[key] = {\n            keyRaw,\n            keyBase64,\n            valueRaw: new Uint8Array(valueRaw),\n            valueBase64: valueBase64,\n            value: valueRaw.toString('utf-8'),\n          }\n          break\n        case 2: {\n          const value = tealValue.uint ?? 0\n          stateValues[key] = {\n            keyRaw,\n            keyBase64,\n            value: BigInt(value),\n          }\n          break\n        }\n        default:\n          throw new Error(`Received unknown state data type of ${dataTypeFlag}`)\n      }\n    }\n\n    return stateValues\n  }\n\n  /**\n   * Returns any ABI return values for the given app call arguments and transaction confirmation.\n   * @param confirmation The transaction confirmation from algod\n   * @param method The ABI method\n   * @returns The return value for the method call\n   */\n  public static getABIReturn(\n    confirmation: modelsv2.PendingTransactionResponse | undefined,\n    method: algosdk.ABIMethod | undefined,\n  ): ABIReturn | undefined {\n    if (!method || !confirmation || method.returns.type === 'void') {\n      return undefined\n    }\n\n    // The parseMethodResponse method mutates the second parameter :(\n    const resultDummy: algosdk.ABIResult = {\n      txID: '',\n      method,\n      rawReturnValue: new Uint8Array(),\n    }\n    const response = algosdk.AtomicTransactionComposer.parseMethodResponse(method, resultDummy, confirmation)\n    return !response.decodeError\n      ? {\n          rawReturnValue: response.rawReturnValue,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          returnValue: response.returnValue!,\n          decodeError: undefined,\n        }\n      : {\n          rawReturnValue: undefined,\n          returnValue: undefined,\n          decodeError: response.decodeError,\n        }\n  }\n\n  /**\n   * Replaces AlgoKit deploy-time deployment control parameters within the given TEAL template code.\n   *\n   * * `TMPL_UPDATABLE` for updatability / immutability control\n   * * `TMPL_DELETABLE` for deletability / permanence control\n   *\n   * Note: If these values are defined, but the corresponding `TMPL_*` value\n   *  isn't in the teal code it will throw an exception.\n   *\n   * @param tealTemplateCode The TEAL template code to substitute\n   * @param params The deploy-time deployment control parameter value to replace\n   * @returns The replaced TEAL code\n   */\n  static replaceTealTemplateDeployTimeControlParams(tealTemplateCode: string, params: { updatable?: boolean; deletable?: boolean }) {\n    if (params.updatable !== undefined) {\n      if (!tealTemplateCode.includes(UPDATABLE_TEMPLATE_NAME)) {\n        throw new Error(\n          `Deploy-time updatability control requested for app deployment, but ${UPDATABLE_TEMPLATE_NAME} not present in TEAL code`,\n        )\n      }\n      tealTemplateCode = tealTemplateCode.replace(new RegExp(UPDATABLE_TEMPLATE_NAME, 'g'), (params.updatable ? 1 : 0).toString())\n    }\n\n    if (params.deletable !== undefined) {\n      if (!tealTemplateCode.includes(DELETABLE_TEMPLATE_NAME)) {\n        throw new Error(\n          `Deploy-time deletability control requested for app deployment, but ${DELETABLE_TEMPLATE_NAME} not present in TEAL code`,\n        )\n      }\n      tealTemplateCode = tealTemplateCode.replace(new RegExp(DELETABLE_TEMPLATE_NAME, 'g'), (params.deletable ? 1 : 0).toString())\n    }\n\n    return tealTemplateCode\n  }\n\n  /**\n   * Performs template substitution of a teal file.\n   *\n   * Looks for `TMPL_{parameter}` for template replacements.\n   *\n   * @param tealTemplateCode The TEAL template code to make parameter replacements in\n   * @param templateParams Any parameters to replace in the teal code\n   * @returns The TEAL code with replacements\n   */\n  static replaceTealTemplateParams(tealTemplateCode: string, templateParams?: TealTemplateParams) {\n    if (templateParams !== undefined) {\n      for (const key in templateParams) {\n        const value = templateParams[key]\n        const token = `TMPL_${key.replace(/^TMPL_/, '')}`\n\n        // If this is a number, first replace any byte representations of the number\n        // These may appear in the TEAL in order to circumvent int compression and preserve PC values\n        if (typeof value === 'number' || typeof value === 'bigint') {\n          tealTemplateCode = tealTemplateCode.replace(new RegExp(`(?<=bytes )${token}`, 'g'), `0x${value.toString(16).padStart(16, '0')}`)\n\n          // We could probably return here since mixing pushint and pushbytes is likely not going to happen, but might as well do both\n        }\n\n        tealTemplateCode = tealTemplateCode.replace(\n          new RegExp(token, 'g'),\n          typeof value === 'string'\n            ? `0x${Buffer.from(value, 'utf-8').toString('hex')}`\n            : ArrayBuffer.isView(value)\n              ? `0x${Buffer.from(value).toString('hex')}`\n              : value.toString(),\n        )\n      }\n    }\n\n    return tealTemplateCode\n  }\n\n  /**\n   * Remove comments from TEAL code (useful to reduce code size before compilation).\n   *\n   * @param tealCode The TEAL logic to strip\n   * @returns The TEAL without comments\n   */\n  static stripTealComments(tealCode: string) {\n    // find // outside quotes, i.e. won't pick up \"//not a comment\"\n    const regex = /\\/\\/(?=([^\"\\\\]*(\\\\.|\"([^\"\\\\]*\\\\.)*[^\"\\\\]*\"))*[^\"]*$)/\n\n    tealCode = tealCode\n      .split('\\n')\n      .map((tealCodeLine) => {\n        return tealCodeLine.split(regex)[0].trim()\n      })\n      .join('\\n')\n\n    return tealCode\n  }\n}\n"],"names":[],"mappings":";;;AAWA,IAAO,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;AAoFlC;MACa,UAAU,CAAA;AAIrB;;;AAGG;AACH,IAAA,WAAA,CAAY,KAAsB,EAAA;QAN1B,IAAmB,CAAA,mBAAA,GAAiC,EAAE,CAAA;AAO5D,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;KACpB;AAED;;;;;;;;;;AAUG;IACH,MAAM,WAAW,CAAC,QAAgB,EAAA;AAChC,QAAA,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAA;SAC1C;AAED,QAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAA;AACzE,QAAA,MAAM,MAAM,GAAG;AACb,YAAA,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,QAAQ,CAAC,MAAM;YACzB,YAAY,EAAE,QAAQ,CAAC,IAAI;AAC3B,YAAA,qBAAqB,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC7E,SAAS,EAAE,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;SACxD,CAAA;AACD,QAAA,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAA;AAE3C,QAAA,OAAO,MAAM,CAAA;KACd;AAED;;;;;;;;;;;;;AAaG;AACH,IAAA,MAAM,mBAAmB,CACvB,gBAAwB,EACxB,cAAmC,EACnC,kBAAiE,EAAA;QAEjE,IAAI,QAAQ,GAAG,UAAU,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAA;QAE7D,QAAQ,GAAG,UAAU,CAAC,yBAAyB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QAEzE,IAAI,kBAAkB,EAAE;YACtB,QAAQ,GAAG,UAAU,CAAC,0CAA0C,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAA;SAC/F;AAED,QAAA,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;KACxC;AAED;;;;;AAKG;AACH,IAAA,oBAAoB,CAAC,QAAgB,EAAA;AACnC,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAA;KAC1C;AAED;;;;;;;;;;AAUG;IACI,MAAM,OAAO,CAAC,KAAa,EAAA;QAChC,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,qBAAqB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;QAChH,OAAO;AACL,YAAA,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;YACrB,UAAU,EAAE,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC;AACjD,YAAA,eAAe,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe;AAC3C,YAAA,iBAAiB,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAiB;AAC/C,YAAA,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO;AAC3B,YAAA,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,IAAI,CAAC,CAAC;AAC5D,YAAA,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,YAAY,IAAI,CAAC,CAAC;AACvE,YAAA,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,EAAE,OAAO,IAAI,CAAC,CAAC;AAC9D,YAAA,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,EAAE,YAAY,IAAI,CAAC,CAAC;YACzE,iBAAiB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,IAAI,CAAC,CAAC;AAC5D,YAAA,WAAW,EAAE,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,IAAI,EAAE,CAAC;SACrE,CAAA;KACF;AAED;;;;;AAKG;IACI,MAAM,cAAc,CAAC,KAAa,EAAA;QACvC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,WAAW,CAAA;KAC/C;AAED;;;;;;AAMG;AACI,IAAA,MAAM,aAAa,CAAC,KAAa,EAAE,OAAe,EAAA;QACvD,MAAM,OAAO,GAAG,QAAQ,CAAC,0BAA0B,CAAC,qBAAqB,CACvE,MAAM,IAAI,CAAC,MAAM,CAAC,6BAA6B,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAC7E,CAAA;AAED,QAAA,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,EAAE;AACpC,YAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;SAC7C;QAED,OAAO,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;KACjE;AAED;;;;AAIG;IACI,MAAM,WAAW,CAAC,KAAa,EAAA;AACpC,QAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAA;QAC3E,OAAO,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAI;YAC/B,OAAO;gBACL,OAAO,EAAE,CAAC,CAAC,IAAI;AACf,gBAAA,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAClD,gBAAA,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;aAC5C,CAAA;AACH,SAAC,CAAC,CAAA;KACH;AAED;;;;;AAKG;AACI,IAAA,MAAM,WAAW,CAAC,KAAa,EAAE,OAAsB,EAAA;QAC5D,MAAM,IAAI,GAAG,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,CAAA;AACrD,QAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAA;QACrF,OAAO,SAAS,CAAC,KAAK,CAAA;KACvB;AAED;;;;;AAKG;AACI,IAAA,MAAM,YAAY,CAAC,KAAa,EAAE,QAAyB,EAAA;QAChE,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,OAAO,KAAK,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAA;KAClG;AAED;;;;AAIG;IACI,MAAM,sBAAsB,CAAC,OAA8B,EAAA;QAChE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,OAAO,CAAA;QACxC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;AACpD,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KAC1B;AAED;;;;AAIG;IACI,MAAM,uBAAuB,CAAC,OAA+B,EAAA;QAClE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,OAAO,CAAA;AACzC,QAAA,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,OAAO,KAAK,MAAM,IAAI,CAAC,sBAAsB,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;KACvH;AAED;;;;AAIG;IACI,OAAO,eAAe,CAAC,KAAmC,EAAA;QAC/D,MAAM,GAAG,GAAG,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,GAAG,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA;QAC9F,OAAO;AACL,YAAA,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;AAC3B,YAAA,IAAI,EACF,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ;kBACxB,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;AACpC,kBAAE,QAAQ,IAAI,GAAG,CAAC,IAAI;sBAClB,GAAG,CAAC,IAAI;AACV,sBAAE,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS;SAC/B,CAAA;KAC1B;AAED;;;;;AAKG;IACI,OAAO,cAAc,CAAC,KAAwE,EAAA;QACnG,MAAM,WAAW,GAAG,EAAc,CAAA;;AAGlC,QAAA,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;AAC5B,YAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAA;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;YAC/C,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;AACpC,YAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAA;AAEhC,YAAA,MAAM,YAAY,GAAG,QAAQ,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAA;AAC9E,YAAA,IAAI,WAAmB,CAAA;AACvB,YAAA,IAAI,QAAgB,CAAA;YACpB,QAAQ,YAAY;AAClB,gBAAA,KAAK,CAAC;AACJ,oBAAA,WAAW,GAAG,SAAS,CAAC,KAAK,IAAI,EAAE,CAAA;oBACnC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;oBAC7C,WAAW,CAAC,GAAG,CAAC,GAAG;wBACjB,MAAM;wBACN,SAAS;AACT,wBAAA,QAAQ,EAAE,IAAI,UAAU,CAAC,QAAQ,CAAC;AAClC,wBAAA,WAAW,EAAE,WAAW;AACxB,wBAAA,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;qBAClC,CAAA;oBACD,MAAK;gBACP,KAAK,CAAC,EAAE;AACN,oBAAA,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,IAAI,CAAC,CAAA;oBACjC,WAAW,CAAC,GAAG,CAAC,GAAG;wBACjB,MAAM;wBACN,SAAS;AACT,wBAAA,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;qBACrB,CAAA;oBACD,MAAK;iBACN;AACD,gBAAA;AACE,oBAAA,MAAM,IAAI,KAAK,CAAC,uCAAuC,YAAY,CAAA,CAAE,CAAC,CAAA;aACzE;SACF;AAED,QAAA,OAAO,WAAW,CAAA;KACnB;AAED;;;;;AAKG;AACI,IAAA,OAAO,YAAY,CACxB,YAA6D,EAC7D,MAAqC,EAAA;AAErC,QAAA,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;AAC9D,YAAA,OAAO,SAAS,CAAA;SACjB;;AAGD,QAAA,MAAM,WAAW,GAAsB;AACrC,YAAA,IAAI,EAAE,EAAE;YACR,MAAM;YACN,cAAc,EAAE,IAAI,UAAU,EAAE;SACjC,CAAA;AACD,QAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,MAAM,EAAE,WAAW,EAAE,YAAY,CAAC,CAAA;QACzG,OAAO,CAAC,QAAQ,CAAC,WAAW;AAC1B,cAAE;gBACE,cAAc,EAAE,QAAQ,CAAC,cAAc;;gBAEvC,WAAW,EAAE,QAAQ,CAAC,WAAY;AAClC,gBAAA,WAAW,EAAE,SAAS;AACvB,aAAA;AACH,cAAE;AACE,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,WAAW,EAAE,SAAS;gBACtB,WAAW,EAAE,QAAQ,CAAC,WAAW;aAClC,CAAA;KACN;AAED;;;;;;;;;;;;AAYG;AACH,IAAA,OAAO,0CAA0C,CAAC,gBAAwB,EAAE,MAAoD,EAAA;AAC9H,QAAA,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE;AACvD,gBAAA,MAAM,IAAI,KAAK,CACb,sEAAsE,uBAAuB,CAAA,yBAAA,CAA2B,CACzH,CAAA;aACF;AACD,YAAA,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,uBAAuB,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAA;SAC7H;AAED,QAAA,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE;AACvD,gBAAA,MAAM,IAAI,KAAK,CACb,sEAAsE,uBAAuB,CAAA,yBAAA,CAA2B,CACzH,CAAA;aACF;AACD,YAAA,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,uBAAuB,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAA;SAC7H;AAED,QAAA,OAAO,gBAAgB,CAAA;KACxB;AAED;;;;;;;;AAQG;AACH,IAAA,OAAO,yBAAyB,CAAC,gBAAwB,EAAE,cAAmC,EAAA;AAC5F,QAAA,IAAI,cAAc,KAAK,SAAS,EAAE;AAChC,YAAA,KAAK,MAAM,GAAG,IAAI,cAAc,EAAE;AAChC,gBAAA,MAAM,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,CAAA;AACjC,gBAAA,MAAM,KAAK,GAAG,CAAQ,KAAA,EAAA,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA,CAAE,CAAA;;;gBAIjD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC1D,oBAAA,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,CAAc,WAAA,EAAA,KAAK,CAAE,CAAA,EAAE,GAAG,CAAC,EAAE,CAAK,EAAA,EAAA,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA,CAAE,CAAC,CAAA;;iBAGjI;AAED,gBAAA,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CACzC,IAAI,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,EACtB,OAAO,KAAK,KAAK,QAAQ;AACvB,sBAAE,CAAA,EAAA,EAAK,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAE,CAAA;AACpD,sBAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC;AACzB,0BAAE,CAAA,EAAA,EAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAE,CAAA;AAC3C,0BAAE,KAAK,CAAC,QAAQ,EAAE,CACvB,CAAA;aACF;SACF;AAED,QAAA,OAAO,gBAAgB,CAAA;KACxB;AAED;;;;;AAKG;IACH,OAAO,iBAAiB,CAAC,QAAgB,EAAA;;QAEvC,MAAM,KAAK,GAAG,sDAAsD,CAAA;AAEpE,QAAA,QAAQ,GAAG,QAAQ;aAChB,KAAK,CAAC,IAAI,CAAC;AACX,aAAA,GAAG,CAAC,CAAC,YAAY,KAAI;AACpB,YAAA,OAAO,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;AAC5C,SAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,CAAA;AAEb,QAAA,OAAO,QAAQ,CAAA;KAChB;AACF;;;;"}