import algosdk from 'algosdk';
import { MultisigAccount, SigningAccount, TransactionSignerAccount } from './account';
import { AccountManager } from './account-manager';
import { AlgorandClientInterface } from './algorand-client-interface';
import { AlgorandClientTransactionCreator } from './algorand-client-transaction-creator';
import { AlgorandClientTransactionSender } from './algorand-client-transaction-sender';
import { AppDeployer } from './app-deployer';
import { AppManager } from './app-manager';
import { AssetManager } from './asset-manager';
import { AlgoSdkClients, ClientManager } from './client-manager';
import AlgoKitComposer from './composer';
import { AlgoConfig } from './network-client';
import Account = algosdk.Account;
import LogicSigAccount = algosdk.LogicSigAccount;
/**
 * A client that brokers easy access to Algorand functionality.
 */
export declare class AlgorandClient implements AlgorandClientInterface {
    private _clientManager;
    private _accountManager;
    private _appManager;
    private _appDeployer;
    private _assetManager;
    private _transactionSender;
    private _transactionCreator;
    private _cachedSuggestedParams?;
    private _cachedSuggestedParamsExpiry?;
    private _cachedSuggestedParamsTimeout;
    private _defaultValidityWindow;
    private constructor();
    /**
     * Sets the default validity window for transactions.
     * @param validityWindow The number of rounds between the first and last valid rounds
     * @returns The `AlgorandClient` so method calls can be chained
     */
    setDefaultValidityWindow(validityWindow: number): this;
    /**
     * Sets the default signer to use if no other signer is specified.
     * @param signer The signer to use, either a `TransactionSigner` or a `TransactionSignerAccount`
     * @returns The `AlgorandClient` so method calls can be chained
     */
    setDefaultSigner(signer: algosdk.TransactionSigner | TransactionSignerAccount): AlgorandClient;
    /**
     * Tracks the given account (object that encapsulates an address and a signer) for later signing.
     * @param account The account to register, which can be a `TransactionSignerAccount` or
     *  a `algosdk.Account`, `algosdk.LogicSigAccount`, `SigningAccount` or `MultisigAccount`
     * @example
     * ```typescript
     * const accountManager = AlgorandClient.mainnet()
     *  .setSignerFromAccount(algosdk.generateAccount())
     *  .setSignerFromAccount(new algosdk.LogicSigAccount(program, args))
     *  .setSignerFromAccount(new SigningAccount(mnemonic, sender))
     *  .setSignerFromAccount(new MultisigAccount({version: 1, threshold: 1, addrs: ["ADDRESS1...", "ADDRESS2..."]}, [account1, account2]))
     *  .setSignerFromAccount({addr: "SENDERADDRESS", signer: transactionSigner})
     * ```
     * @returns The `AlgorandClient` so method calls can be chained
     */
    setSignerFromAccount(account: TransactionSignerAccount | TransactionSignerAccount | Account | LogicSigAccount | SigningAccount | MultisigAccount): this;
    /**
     * Tracks the given signer against the given sender for later signing.
     * @param sender The sender address to use this signer for
     * @param signer The signer to sign transactions with for the given sender
     * @returns The `AlgorandClient` so method calls can be chained
     */
    setSigner(sender: string, signer: algosdk.TransactionSigner): this;
    /**
     * Sets a cache value to use for suggested transaction params.
     * @param suggestedParams The suggested params to use
     * @param until A date until which to cache, or if not specified then the timeout is used
     * @returns The `AlgorandClient` so method calls can be chained
     */
    setSuggestedParamsCache(suggestedParams: algosdk.SuggestedParams, until?: Date): this;
    /**
     * Sets the timeout for caching suggested params.
     * @param timeout The timeout in milliseconds
     * @returns The `AlgorandClient` so method calls can be chained
     */
    setSuggestedParamsCacheTimeout(timeout: number): this;
    /** Get suggested params for a transaction (either cached or from algod if the cache is stale or empty) */
    getSuggestedParams(): Promise<algosdk.SuggestedParams>;
    /** Get clients, including algosdk clients and app clients. */
    get client(): ClientManager;
    /** Get or create accounts that can sign transactions. */
    get account(): AccountManager;
    /** Methods for interacting with assets. */
    get asset(): AssetManager;
    /** Methods for interacting with apps. */
    get app(): AppManager;
    /** Methods for deploying apps and managing app deployment metadata. */
    get appDeployer(): AppDeployer;
    /** Start a new `AlgoKitComposer` transaction group */
    newGroup(): AlgoKitComposer;
    /**
     * Methods for sending a transaction.
     */
    get send(): AlgorandClientTransactionSender;
    /**
     * Methods for creating a transaction.
     */
    get createTransaction(): AlgorandClientTransactionCreator;
    /**
     * Returns an `AlgorandClient` pointing at default LocalNet ports and API token.
     * @returns The `AlgorandClient`
     */
    static defaultLocalNet(): AlgorandClient;
    /**
     * Returns an `AlgorandClient` pointing at TestNet using AlgoNode.
     * @returns The `AlgorandClient`
     */
    static testNet(): AlgorandClient;
    /**
     * Returns an `AlgorandClient` pointing at MainNet using AlgoNode.
     * @returns The `AlgorandClient`
     */
    static mainNet(): AlgorandClient;
    /**
     * Returns an `AlgorandClient` pointing to the given client(s).
     * @param clients The clients to use
     * @returns The `AlgorandClient`
     */
    static fromClients(clients: AlgoSdkClients): AlgorandClient;
    /**
     * Returns an `AlgorandClient` loading the configuration from environment variables.
     *
     * Retrieve configurations from environment variables when defined or get default LocalNet configuration if they aren't defined.
     *
     * Expects to be called from a Node.js environment.
     *
     * If `process.env.ALGOD_SERVER` is defined it will use that along with optional `process.env.ALGOD_PORT` and `process.env.ALGOD_TOKEN`.
     *
     * If `process.env.INDEXER_SERVER` is defined it will use that along with optional `process.env.INDEXER_PORT` and `process.env.INDEXER_TOKEN`.
     *
     * If either aren't defined it will use the default LocalNet config.
     *
     * It will return a KMD configuration that uses `process.env.KMD_PORT` (or port 4002) if `process.env.ALGOD_SERVER` is defined,
     * otherwise it will use the default LocalNet config unless it detects testnet or mainnet.
     * @returns The `AlgorandClient`
     */
    static fromEnvironment(): AlgorandClient;
    /**
     * Returns an `AlgorandClient` from the given config.
     * @param config The config to use
     * @returns The `AlgorandClient`
     */
    static fromConfig(config: AlgoConfig): AlgorandClient;
}
export default AlgorandClient;
