{"version":3,"file":"indexer-lookup.mjs","sources":["../src/indexer-lookup.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport type SearchForTransactions from 'algosdk/dist/types/client/v2/indexer/searchForTransactions'\nimport {\n  AccountLookupResult,\n  ApplicationCreatedLookupResult,\n  ApplicationResult,\n  AssetBalancesLookupResult,\n  LookupAssetHoldingsOptions,\n  MiniAssetHolding,\n  TransactionLookupResult,\n  TransactionSearchResults,\n} from './types/indexer'\nimport Indexer = algosdk.Indexer\n\nconst DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT = 1000 //MaxAPIResourcesPerAccount: This is the default maximum, though may be provider specific\n\n/**\n * Looks up a transaction by ID using Indexer.\n * @param transactionId The ID of the transaction to look up\n * @param indexer An indexer client\n * @returns The result of the look-up\n */\nexport async function lookupTransactionById(transactionId: string, indexer: Indexer): Promise<TransactionLookupResult> {\n  return (await indexer.lookupTransactionByID(transactionId).do()) as TransactionLookupResult\n}\n\n/**\n * Looks up an account by address using Indexer.\n * @param accountAddress The address of the account to look up\n * @param indexer An indexer client\n * @returns The result of the look-up\n */\nexport async function lookupAccountByAddress(accountAddress: string, indexer: Indexer): Promise<AccountLookupResult> {\n  return (await indexer.lookupAccountByID(accountAddress).do()) as AccountLookupResult\n}\n\n/**\n * Looks up applications that were created by the given address; will automatically paginate through all data.\n * @param indexer An indexer instance\n * @param address The address of the creator to look up\n * @param getAll Whether or not to include deleted applications\n * @param paginationLimit The number of records to return per paginated request, default 1000\n * @returns The list of application results\n */\nexport async function lookupAccountCreatedApplicationByAddress(\n  indexer: Indexer,\n  address: string,\n  getAll: boolean | undefined = undefined,\n  paginationLimit?: number,\n): Promise<ApplicationResult[]> {\n  return await executePaginatedRequest(\n    (response: ApplicationCreatedLookupResult | { message: string }) => {\n      if ('message' in response) {\n        throw { status: 404, ...response }\n      }\n      return response.applications\n    },\n    (nextToken) => {\n      let s = indexer\n        .lookupAccountCreatedApplications(address)\n        .includeAll(getAll)\n        .limit(paginationLimit ?? DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT)\n      if (nextToken) {\n        s = s.nextToken(nextToken)\n      }\n      return s\n    },\n  )\n}\n\n/**\n * Looks up asset holdings for the given asset; will automatically paginate through all data.\n * @param indexer An indexer instance\n * @param assetId The ID of the asset to look up holdings for\n * @param options Optional options to control the lookup\n * @param paginationLimit The number of records to return per paginated request, default 1000\n * @returns The list of application results\n */\nexport async function lookupAssetHoldings(\n  indexer: Indexer,\n  assetId: number | bigint,\n  options?: LookupAssetHoldingsOptions,\n  paginationLimit?: number,\n): Promise<MiniAssetHolding[]> {\n  return await executePaginatedRequest(\n    (response: AssetBalancesLookupResult | { message: string }) => {\n      if ('message' in response) {\n        throw { status: 404, ...response }\n      }\n      return response.balances\n    },\n    (nextToken) => {\n      let s = indexer.lookupAssetBalances(Number(assetId)).limit(paginationLimit ?? DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT)\n      if (options?.currencyGreaterThan !== undefined) {\n        s = s.currencyGreaterThan(options.currencyGreaterThan)\n      }\n      if (options?.currencyLessThan !== undefined) {\n        s = s.currencyLessThan(options.currencyLessThan)\n      }\n      if (options?.includeAll !== undefined) {\n        s = s.includeAll(options.includeAll)\n      }\n      if (nextToken) {\n        s = s.nextToken(nextToken)\n      }\n      return s\n    },\n  )\n}\n\n/**\n * Allows transactions to be searched for the given criteria.\n * @param indexer An indexer client\n * @param searchCriteria The criteria to search for\n * @param paginationLimit The number of records to return per paginated request, default 1000\n * @returns The search results\n */\nexport async function searchTransactions(\n  indexer: Indexer,\n  searchCriteria: (s: SearchForTransactions) => SearchForTransactions,\n  paginationLimit?: number,\n): Promise<TransactionSearchResults> {\n  let currentRound = 0\n  const transactions = await executePaginatedRequest(\n    (response: TransactionSearchResults | { message: string }) => {\n      if ('message' in response) {\n        throw { status: 404, ...response }\n      }\n      if (response['current-round'] > currentRound) {\n        currentRound = response['current-round']\n      }\n      return response.transactions\n    },\n    (nextToken) => {\n      let s = searchCriteria(indexer.searchForTransactions()).limit(paginationLimit ?? DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT)\n      if (nextToken) {\n        s = s.nextToken(nextToken)\n      }\n      return s\n    },\n  )\n\n  return {\n    'current-round': currentRound,\n    'next-token': '',\n    transactions: transactions,\n  }\n}\n\n// https://developer.algorand.org/docs/get-details/indexer/#paginated-results\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function executePaginatedRequest<TResult, TRequest extends { do: () => Promise<any> }>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extractItems: (response: any) => TResult[],\n  buildRequest: (nextToken?: string) => TRequest,\n): Promise<TResult[]> {\n  const results = []\n\n  let nextToken: string | undefined = undefined\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const request = buildRequest(nextToken)\n    const response = await request.do()\n    const items = extractItems(response)\n    if (items == null || items.length === 0) {\n      break\n    }\n    results.push(...items)\n    nextToken = response['next-token']\n    if (!nextToken) {\n      break\n    }\n  }\n\n  return results\n}\n"],"names":[],"mappings":"AAcA,MAAM,6CAA6C,GAAG,IAAI,CAAA;AAE1D;;;;;AAKG;AACI,eAAe,qBAAqB,CAAC,aAAqB,EAAE,OAAgB,EAAA;AACjF,IAAA,QAAQ,MAAM,OAAO,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC,EAAE,EAAE,EAA4B;AAC7F,CAAC;AAED;;;;;AAKG;AACI,eAAe,sBAAsB,CAAC,cAAsB,EAAE,OAAgB,EAAA;AACnF,IAAA,QAAQ,MAAM,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAwB;AACtF,CAAC;AAED;;;;;;;AAOG;AACI,eAAe,wCAAwC,CAC5D,OAAgB,EAChB,OAAe,EACf,MAAA,GAA8B,SAAS,EACvC,eAAwB,EAAA;AAExB,IAAA,OAAO,MAAM,uBAAuB,CAClC,CAAC,QAA8D,KAAI;AACjE,QAAA,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAA;SACnC;QACD,OAAO,QAAQ,CAAC,YAAY,CAAA;AAC9B,KAAC,EACD,CAAC,SAAS,KAAI;QACZ,IAAI,CAAC,GAAG,OAAO;aACZ,gCAAgC,CAAC,OAAO,CAAC;aACzC,UAAU,CAAC,MAAM,CAAC;AAClB,aAAA,KAAK,CAAC,eAAe,IAAI,6CAA6C,CAAC,CAAA;QAC1E,IAAI,SAAS,EAAE;AACb,YAAA,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;SAC3B;AACD,QAAA,OAAO,CAAC,CAAA;AACV,KAAC,CACF,CAAA;AACH,CAAC;AAED;;;;;;;AAOG;AACI,eAAe,mBAAmB,CACvC,OAAgB,EAChB,OAAwB,EACxB,OAAoC,EACpC,eAAwB,EAAA;AAExB,IAAA,OAAO,MAAM,uBAAuB,CAClC,CAAC,QAAyD,KAAI;AAC5D,QAAA,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAA;SACnC;QACD,OAAO,QAAQ,CAAC,QAAQ,CAAA;AAC1B,KAAC,EACD,CAAC,SAAS,KAAI;AACZ,QAAA,IAAI,CAAC,GAAG,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,IAAI,6CAA6C,CAAC,CAAA;AAC5H,QAAA,IAAI,OAAO,EAAE,mBAAmB,KAAK,SAAS,EAAE;YAC9C,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;SACvD;AACD,QAAA,IAAI,OAAO,EAAE,gBAAgB,KAAK,SAAS,EAAE;YAC3C,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;SACjD;AACD,QAAA,IAAI,OAAO,EAAE,UAAU,KAAK,SAAS,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;SACrC;QACD,IAAI,SAAS,EAAE;AACb,YAAA,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;SAC3B;AACD,QAAA,OAAO,CAAC,CAAA;AACV,KAAC,CACF,CAAA;AACH,CAAC;AAED;;;;;;AAMG;AACI,eAAe,kBAAkB,CACtC,OAAgB,EAChB,cAAmE,EACnE,eAAwB,EAAA;IAExB,IAAI,YAAY,GAAG,CAAC,CAAA;IACpB,MAAM,YAAY,GAAG,MAAM,uBAAuB,CAChD,CAAC,QAAwD,KAAI;AAC3D,QAAA,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAA;SACnC;AACD,QAAA,IAAI,QAAQ,CAAC,eAAe,CAAC,GAAG,YAAY,EAAE;AAC5C,YAAA,YAAY,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAA;SACzC;QACD,OAAO,QAAQ,CAAC,YAAY,CAAA;AAC9B,KAAC,EACD,CAAC,SAAS,KAAI;AACZ,QAAA,IAAI,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,IAAI,6CAA6C,CAAC,CAAA;QAC/H,IAAI,SAAS,EAAE;AACb,YAAA,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;SAC3B;AACD,QAAA,OAAO,CAAC,CAAA;AACV,KAAC,CACF,CAAA;IAED,OAAO;AACL,QAAA,eAAe,EAAE,YAAY;AAC7B,QAAA,YAAY,EAAE,EAAE;AAChB,QAAA,YAAY,EAAE,YAAY;KAC3B,CAAA;AACH,CAAC;AAED;AACA;AACO,eAAe,uBAAuB;AAC3C;AACA,YAA0C,EAC1C,YAA8C,EAAA;IAE9C,MAAM,OAAO,GAAG,EAAE,CAAA;IAElB,IAAI,SAAS,GAAuB,SAAS,CAAA;;IAE7C,OAAO,IAAI,EAAE;AACX,QAAA,MAAM,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,CAAA;AACvC,QAAA,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,EAAE,CAAA;AACnC,QAAA,MAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAA;QACpC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC,MAAK;SACN;AACD,QAAA,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAA;AACtB,QAAA,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAA;QAClC,IAAI,CAAC,SAAS,EAAE;YACd,MAAK;SACN;KACF;AAED,IAAA,OAAO,OAAO,CAAA;AAChB;;;;"}